<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chiabi&#39;s dev blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chiabi.github.io/"/>
  <updated>2018-06-19T16:28:23.137Z</updated>
  <id>http://chiabi.github.io/</id>
  
  <author>
    <name>chiabi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TIL 20180619</title>
    <link href="http://chiabi.github.io/2018/06/20/TIL/"/>
    <id>http://chiabi.github.io/2018/06/20/TIL/</id>
    <published>2018-06-19T16:26:50.000Z</published>
    <updated>2018-06-19T16:28:23.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="1-프로트엔드-스쿨과정-리액트"><a href="#1-프로트엔드-스쿨과정-리액트" class="headerlink" title="1. 프로트엔드 스쿨과정 - 리액트"></a>1. 프로트엔드 스쿨과정 - 리액트</h3><ul><li>Provider의 적절한 위치는?</li><li>마운트되었을 때 부작용을 일으키는 컴포넌트 (OnMount 컴포넌트)</li><li>브라우저의 중요한 UI - 주소표시줄, hash, 새로고침, 뒤로가기, 앞으로가기</li><li>HTML5 history API &amp; hashchange</li><li>react-router 소개 및 실습</li></ul><p>‘만약 단순한 모달 정도가 아니라 페이지가 이동되는 것 같이 느껴지도록 만들려면 리액트로 어떻게 해야하지?’ 라는 고민이 해결되었다. 리액트 라우터를 통해 굉장히 쉽게 구현할 수 있었다. 강사님께서 리액트 라우터에 대해 설명하기 전에 마운트되었을 때 부작용을 일으키는 컴포넌트나 history객체, pushState 같은 바탕이 되는 개념을 먼저 설명해주셔서 덕분에 크게 어렵게 느껴지지 않았다.<br>리액트 라우터를 배우고 나니 파이널 프로젝트에서는 쇼핑몰을 도전해보고 싶어졌다.</p><h3 id="2-rgb-챌린지-게임-수정"><a href="#2-rgb-챌린지-게임-수정" class="headerlink" title="2. rgb 챌린지 게임 수정"></a>2. rgb 챌린지 게임 수정</h3><p>강사님이 코드 리뷰를 해주신 것을 토대로 다시 수정했다. 컬러 코드, 스테이지, 점수 등이 서로 결합되어 있기 때문에 GameContext라는 하나의 컴포넌트에서 모든 상태를 관리하는 방법으로 해볼 것을 조언해주셔서 ColorContext와 ResultContext, ScoreContext로 나눴던 것을 GameContext로 합쳤다. 그리고 GameConsumer를 사용하게 되는 부분은 Container 컴폰너트로 따로 만들었다.<br>컴포넌트가 너무 많은것이 아닌가 걱정이었는데, context 컴포넌트를 줄였음에도 Presentaional 컴포넌트와 Container 컴포넌트로 분리해보려고 했더니 컴포넌트가 많아졌다.<br>어쩌면 내가 잘못 쓰고 있는 건 아닌지;;<br>강사님이 번역해주신 dan Abramov의 아티클을 다시 읽어봤는데, 잘 사용하고 있는지 아직은 개념이 어렵게 느껴진다. 내일 또 여쭤봐야겠다.</p><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li>리액트 미니 프로젝트 - social card 만들기(트위터 참고)</li><li>자기소개서 최종 검토하기</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;1-프로트엔드-스쿨과정-리액트&quot;&gt;&lt;a href=&quot;#1-프로트엔드-스쿨과정-리액트&quot; cla
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL 20180618</title>
    <link href="http://chiabi.github.io/2018/06/19/TIL/"/>
    <id>http://chiabi.github.io/2018/06/19/TIL/</id>
    <published>2018-06-18T15:49:40.000Z</published>
    <updated>2018-06-18T16:07:20.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="프로트엔드-스쿨과정-리액트"><a href="#프로트엔드-스쿨과정-리액트" class="headerlink" title="프로트엔드 스쿨과정 - 리액트"></a>프로트엔드 스쿨과정 - 리액트</h3><ul><li>children prop</li><li>로그인 시 예외 처리 (비동기 예외처리)</li><li><code>ref</code>와 “제어되지 않는 컴포넌트”로 폼 바꿔보기</li><li>Presentational component &amp; Container component</li><li>Storybook</li></ul><p>제어되지 않는 컴포넌트 부분은 break week 기간에 잠깐 튜토리얼 따라해 보면서 봤던 부분인데 다시 복습하게 되었다. form의 기본 submit 기능을 사용하게 되면, 따로 이벤트 메서드를 만들지 않아도 되어 코드가 간결해지는 장점이 있지만, 나중에 폼을 쓰게 될 경우 유효성 검사를 하거나 키보드 접근 관련해서 추가적인 처리를 하게 될 것 같아서 대부분의 경우 제어되는 컴포넌트로 하게 되지 않을까 싶다.</p><p>프레젠테이션과 컨테이너 컴포넌트 관련 글은 전날에 올려주셔서 자기 전에 읽어봤는데, 읽어보니 왠지 rgb챌린지 만들면서 이 둘을 잘 구분해서 사용하지 않은 것 같다고 느꼈다. 또 글이 잘 이해가 안되었는데, 오늘 수업을 통해 조금 정리되는 느낌이다.</p><h2 id="오늘-읽은-글"><a href="#오늘-읽은-글" class="headerlink" title="오늘 읽은 글"></a>오늘 읽은 글</h2><ul><li><a href="https://medium.com/@Dev_Bono/context-api%EA%B0%80-redux%EB%A5%BC-%EB%8C%80%EC%B2%B4%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94-76a6209b369b" target="_blank" rel="noopener">Context API가 Redux를 대체할 수 있을까요?</a></li><li><a href="https://medium.com/@seungha_kim_IT/presentational-and-container-components-%EB%B2%88%EC%97%AD-1b1fb2e36afb" target="_blank" rel="noopener">Presentiational and Container Components(번역)</a></li><li><a href="https://medium.com/dailyjs/when-do-i-know-im-ready-for-redux-f34da253c85f" target="_blank" rel="noopener">When do I know I’m ready for Redux?</a></li></ul><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li>내일 수업 내용 복습(<a href="https://reacttraining.com/react-router/web/guides/philosophy" target="_blank" rel="noopener">리액트 라우터</a>를 들어간다고 한다.)</li><li><a href="https://storybook.js.org/" target="_blank" rel="noopener">스토리북</a> 사용해보기</li><li>리덕스 일단 따로 <a href="https://egghead.io/courses/getting-started-with-redux" target="_blank" rel="noopener">Dan abramov의 소개 영상</a> 보면서 감 잡기</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;프로트엔드-스쿨과정-리액트&quot;&gt;&lt;a href=&quot;#프로트엔드-스쿨과정-리액트&quot; class=&quot;
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL 20180617</title>
    <link href="http://chiabi.github.io/2018/06/17/TIL/"/>
    <id>http://chiabi.github.io/2018/06/17/TIL/</id>
    <published>2018-06-17T10:13:10.000Z</published>
    <updated>2018-06-18T16:07:21.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="1-리액트-RGB-Challenge-완성"><a href="#1-리액트-RGB-Challenge-완성" class="headerlink" title="1. 리액트 RGB Challenge 완성"></a>1. 리액트 RGB Challenge 완성</h3><p>공식문서 Context 파트와 지난 수업 시간했던 todo 리스트 실습을 참고해서 context를 사용해 완성했다. 만들다보니 컴포넌트를 굉장히 많이 나누게 되었는데, 그러다보니 DOM API로 단순하게 만들었던 것이 굉장히 복잡해진 것 같아서 내가 제대로 만든 건지 확신이 없다. context는 컬러, 스코어, 결과로 나눠서 각 파일을 따로 만들다.<br><code>setState()</code>로 각 상태를 변화시키는 메서드를 따로 만들었는데, 예를들면 스코어에서는 <code>upScore</code>, <code>reset</code>으로 하나는 score를 추가해주는 것 하나는 score를 다시 0으로 만드는 메서드이다. 결과 context에서는 <code>showResultGood</code>, <code>showResultBad</code>, <code>reset</code>으로 각각 상태에 ‘good’, ‘bad’, 빈 문자열로 수정하는 메서드이다.<br>이렇게 하는게 맞는 것일까 아니면 메서드는 하나만 만들고 나중에 사용할 때 값을 던져주는 것을 인자로 받아서 setState에 던져주도록 만들어야했을까… 이런저런 사용법에 고민이 많아진다.<br>역할과 책임이라는 것에 신경쓰면서 만드려고 했는데, 잘 한건지는 모르겠다. 좀 더 다른 사람들의 코드나 글을 읽어봐야겠다. </p><p>만들면서 그동안 배운것을 다시 정리하고 context를 좀 더 이해하게 되었다. 강사님이 오늘 읽으려고 해두었던 글을 번역해서 올려주셔서 그걸 읽어보고 다시 고민해봐야겠다.</p><h3 id="2-알고리즘-문제-풀이"><a href="#2-알고리즘-문제-풀이" class="headerlink" title="2. 알고리즘 문제 풀이"></a>2. 알고리즘 문제 풀이</h3><p>1일 1알고리즘 하려고 하는데 지키기 힘든 일인 것 같다. 특히나 문제가 어려우면 고민하다가 하루가 지나가버린다. 지금은 리액트를 익히는 것 역시 중요하니까 우선순위를 정해서 신간 분배를 잘 해야 될 것 같다.</p><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li>리덕스 예습/복습</li><li>리액트로 다른 미니 프로젝트 하기(캘린더 다시 만들어본다거나)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;1-리액트-RGB-Challenge-완성&quot;&gt;&lt;a href=&quot;#1-리액트-RGB-Chall
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Longet Common Prefix</title>
    <link href="http://chiabi.github.io/2018/06/17/Longet-Common-Prefix/"/>
    <id>http://chiabi.github.io/2018/06/17/Longet-Common-Prefix/</id>
    <published>2018-06-17T09:08:46.000Z</published>
    <updated>2018-06-17T10:09:59.408Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-common-prefix/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.<br><strong>Example 1:</strong></p><ul><li>Input: [“flower”,”flow”,”flight”]</li><li>Output: “fl”</li></ul><p><strong>Example 2:</strong></p><ul><li>Input: [“dog”,”racecar”,”car”]</li><li>Output: “”</li><li>Explanation: There is no common prefix among the input strings.<br><strong>Note:</strong><br>All given inputs are in lowercase letters a-z.</li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><p>더 좋은 방법이 생각나지 않아서 일단 난폭하게 for 문 두 번 돌려서 풀어보기로 했다. 이렇게 하지 않고 푸는 방법이 있을까… 생각이 안 난다.<br>배열에 아무것도 들어있지 않은 경우도 고려한 문제였던 모양이다. 계속 런타임 에러가 나길래 보니 빈 배열이 들어가고 있었다.<br>for문을 두 번 돌렸지만, 어차피 prefix 찾는 거라서 앞에서 일치하는 경우 외에는 버리기 때문에 return으로 종료시켜 버렸다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 64ms</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> first = strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (first == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, il = first.length; i &lt; il; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>, jl = strs.length; j &lt; jl; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(first[i] !== strs[j][i]) &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str += first[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 60ms</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> first = strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (first == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> newStrs = strs.slice(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; first.length) &#123;</span><br><span class="line">    <span class="keyword">if</span>(newStrs.every(<span class="function">(<span class="params">item</span>) =&gt;</span> item[i] === first[i])) &#123;</span><br><span class="line">      str += first[i]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>배열의 every 메서드와 while로 풀어봤다. 속도가 크게 개선되지는 않았다.</p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 50ms</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(!strs.length) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span>(strs.length === <span class="number">1</span>) <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> prefix = strs[<span class="number">0</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> strs) &#123;</span><br><span class="line">    <span class="keyword">while</span>(strs[i].indexOf(prefix) !== <span class="number">0</span>) &#123;</span><br><span class="line">      prefix = prefix.substring(<span class="number">0</span>, prefix.length - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span>(!prefix.length) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">return</span> prefix; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>나와 다른 접근법이다. 나는 배열에 있는 요소의 인덱스를 앞에서부터 돌면서 그 인덱스의 문자열이 모두 같으면 <code>str</code>에 더해서 prefix를 만들어 반환했는데,<br>여기는 일단 첫번째 문자열을 prefix라 가정하고 시작한다. 배열의 요소를 하나씩 순회하면서 prefix와 일치하는 문자열을 가지지 않으면 prefix에서 거꾸로 문자를 줄여가며 대조한다.</p><p>그렇다면 첫번째 문자열은 이미 prefix인데 for in문으로 첫번째 요소를 굳이 돌 필요가 있나 했는데, for loop로 인덱스 1부터 도는 것보다 어차피 while문 조건에 걸려서 다음 요소로 넘어가니까 for in문을 쓰는 게 더 빠른가보다.(환경에 따라 다를 수 있겠지만)</p><p>핵심은 <code>indexOf</code>의 사용인 것 같다. 문자열 하나씩 더하는 것보단 문자열 뭉치가 있는 지 확인하는 것이 더 효율적이니까.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 56ms</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!strs.length) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span>(strs.length === <span class="number">1</span>) <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> prefix = strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, l = strs.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span>(strs[i].indexOf(prefix) !== <span class="number">0</span>) &#123;</span><br><span class="line">      prefix = prefix.substring(<span class="number">0</span>, prefix.length - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span>(!prefix.length) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-common-prefix/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquo
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TIL 20180616</title>
    <link href="http://chiabi.github.io/2018/06/16/TIL-1/"/>
    <id>http://chiabi.github.io/2018/06/16/TIL-1/</id>
    <published>2018-06-16T11:54:09.000Z</published>
    <updated>2018-06-16T14:27:53.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="Context-복습"><a href="#Context-복습" class="headerlink" title="Context 복습"></a>Context 복습</h3><p>context를 복습하면서 리액트를 단순하게 사용해본 RGB 챌린지를 수정하고 있다. 리액트 공식문서를 읽어보고, velopert님의 context API관련 예제도 따라해봤다.<br>공식문서를 읽어보니 어떻게 쓰는 지는 이해가 되는데, 그래서 어디까지 context를 써주는 것이 좋은지, 코드를 어떻게 관리되도록 설계하는 것이 좋은지는 아직 감이 안잡힌다.<br>일단 context를 활용해서 전체적으로 이벤트까지 완료한 뒤에 강사님이 공유해 주신 Dan Abramov의 ‘Presentational and Container Components’라는 글을 다시 읽어봐야겠다.</p><p>예제를 따라하는 중에 <code>import React, {Component} from &#39;react&#39;</code> 이하 클래스를 만드는 거나 export시키는 부분은 react 사용하면서 거의 패턴처럼 치게 되니까, vscode의 사용자 코드 조각에 스니펫으로 만들어 두었다.</p><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li>RGB 챌린지 context 완성하기</li><li>Redux 예습하기</li><li>소프트웨어 공학 시간에 정리한 글 다시 다듬어서 올리기</li></ul><hr><p>날이 더워졌다. 에어컨 바람이 간절해진다. 더워질수록 체력 관리를 해야겠다. ‘앞으로 할 일’이라고 썼던 것을 ‘내일 할 일’로 쓰려고 한다. 다 수행하지 못하더라도 내일 할 일로 정해놓으면 더 강제적으로 하게 될 것 같다. </p><p>일주일간 블로그를 해보니 장단점이 있다. 일단 글을 좀 더 다듬게 되고, 글 자체가 정제되어 보이는 장점이 있다.<br>단점은 그냥 깃헙에는 자유롭게 덜 완성된 글이나 정리도 올렸는데, 블로그는 그렇게 하는 것이 쉽지 않아졌다. 물론 누가 잘못된 정보라고 지적하는 게 두려운 것은 아니다. 누가 내 글에 관심을 가져주고, 내가 잘못 알고 있는 부분을 바로잡아 주는 것은 감사한 일이나, 혹시라도 내가 잘못된 정보를 제공하지는 않을까하는 우려도 된다.<br>그런데 사실 그런 부분을 걱정하기 이전에 검색 엔진 최적화 방법을 알아봐야겠다…;;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;Context-복습&quot;&gt;&lt;a href=&quot;#Context-복습&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL 20180615</title>
    <link href="http://chiabi.github.io/2018/06/16/TIL/"/>
    <id>http://chiabi.github.io/2018/06/16/TIL/</id>
    <published>2018-06-15T16:13:22.000Z</published>
    <updated>2018-06-16T14:32:25.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="프론트엔드-개발-과정-특강-소프트웨어-공학"><a href="#프론트엔드-개발-과정-특강-소프트웨어-공학" class="headerlink" title="프론트엔드 개발 과정 - 특강 [소프트웨어 공학]"></a>프론트엔드 개발 과정 - 특강 [소프트웨어 공학]</h3><p>어제 한 과제는 기능 명세가 아니었던 것 같다. 화면설계 전 단계였던듯… why? 도출보다는 상세한 기능 기술이었던 것 같다…<br>수업시간에 클라이언트가 블록체인 거래소를 만들려고 한다는 상황을 가정해서 요구사항을 분석하고, 클라이언트(강사님)에게 질문하는 식으로 진행되었는데, 블록체인이라는 기술 자체를 잘 몰라서 질문을 할 수가 없었다.<br>웹 사이트를 볼때 그냥 보는 것이 아니라 어떤 기술을 사용했고, 어떤 콘텐츠로 이루어져있는지 분석해봐야겠다. 그리고 블록체인이라는 기술 자체에도 관심을 기울여야겠다.</p><h2 id="앞으로-할-일"><a href="#앞으로-할-일" class="headerlink" title="앞으로 할 일"></a>앞으로 할 일</h2><ul><li>RGB 챌린지 context 활용하기</li><li>Redux 미리 예습하기</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;프론트엔드-개발-과정-특강-소프트웨어-공학&quot;&gt;&lt;a href=&quot;#프론트엔드-개발-과정-특강
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome Number</title>
    <link href="http://chiabi.github.io/2018/06/15/Palindrome-Number/"/>
    <id>http://chiabi.github.io/2018/06/15/Palindrome-Number/</id>
    <published>2018-06-14T17:37:32.000Z</published>
    <updated>2018-06-17T09:10:54.176Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p><p><strong>Example 1:</strong></p><ul><li>Input: 121</li><li>Output: true</li></ul><p><strong>Example 2:</strong><br>Input: -121<br>Output: false<br>Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</p><p><strong>Example 3:</strong><br>Input: 10<br>Output: false<br>Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</p><p><strong>Follow up:</strong><br>Coud you solve it without converting the integer to a string?</p></blockquote><p><del>예?? 이걸 문자열화 하지 말고 풀라구요???</del></p><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><p>난이도 easy만 먼저 풀어보는데 속도에 집착하다보니 난이도가 easy가 아닌 것만 같은 기분…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 304ms </span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> str = x.toString();</span><br><span class="line">  <span class="keyword">const</span> reverseStr = str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> str === reverseStr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Hint: Beware of overflow when you reverse the integer.</p></blockquote><p>네..그렇군요… 뒤집는 건 주의해야겠군요…세상에…<br>아래는 while문을 통해 앞 / 뒤로 접근해서 비교하도록 하는 방법인데,<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 268ms</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> str = x.toString();</span><br><span class="line">  <span class="keyword">const</span> l = str.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt;= l) &#123;</span><br><span class="line">    <span class="keyword">if</span>(str[i] !== str[l - i]) &#123;</span><br><span class="line">      <span class="keyword">return</span> (result = <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>반으로 나눠야 중복되는 비교를 안하겠구나 생각해서 아래와 같이 수정했지만 속도가 크게 개선되지는 않았다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 260ms 속도 개선이 별로..</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> str = x.toString();</span><br><span class="line">  <span class="keyword">const</span> l = str.length;</span><br><span class="line">  <span class="keyword">const</span> half = <span class="built_in">Math</span>.floor(l / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> strF = str.slice(<span class="number">0</span>, half);</span><br><span class="line">  <span class="keyword">const</span> strB = str.slice(l % <span class="number">2</span> === <span class="number">0</span> ? half : half + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; half) &#123;</span><br><span class="line">    <span class="keyword">if</span>(strF[i] !== strB[(half - <span class="number">1</span>) - i]) &#123;</span><br><span class="line">      <span class="keyword">return</span> result = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>혹시나 해서 reverse 메소드를 사용하는 방법을 반으로 나눠서 하는 방법으로 다시 풀어봤다.<br>300ms가 280ms로 속도가 개선되었으나 앞의 풀이 방법에 비하면 느리다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 280ms</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> str = x.toString();</span><br><span class="line">  <span class="keyword">const</span> l = str.length;</span><br><span class="line">  <span class="keyword">if</span> (l === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> half = <span class="built_in">Math</span>.floor(l / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> strF = str.slice(<span class="number">0</span>, half);</span><br><span class="line">  <span class="keyword">const</span> strB = str.slice(l % <span class="number">2</span> === <span class="number">0</span> ? half : half + <span class="number">1</span>).split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> strF === strB</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>문자열화하지 않고 숫자인 상태에서 풀면 좀 더 빠를까해서 아래와 같이 풀었는데, 더 느려졌다. 아마 이 역시 주어진 수를 반으로 나눠서 푸는 게 아니라서 그런 것 같다.(수의 길이(?)만큼 비교하게 된다.)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 300ms 아악 더 느려졌다.</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> xClone = x;</span><br><span class="line">  <span class="keyword">const</span> arr = [];</span><br><span class="line">  <span class="keyword">while</span>(xClone) &#123;</span><br><span class="line">    <span class="keyword">const</span> X = xClone % <span class="number">10</span>;</span><br><span class="line">    xClone = <span class="built_in">parseInt</span>(xClone / <span class="number">10</span>);</span><br><span class="line">    arr.push(X % <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x === <span class="built_in">parseInt</span>(arr.join(<span class="string">''</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>뭔가 숫자를 반으로 쪼갤 수 있으면 좋겠는데, 이 부분은 방법이 잘 생각나지 않아서 solution을 보기로 했다.<br>아래는 solution을 참고한 풀이  </p><blockquote><p>Approach 1: Revert half of the number<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">while</span>(x &gt; revertedNumber) &#123;</span><br><span class="line">    revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>이부분을 통해 수를 반으로 나눠 반복문 안에서 비교할 수 있도록 하는 방법이다.<br>C#의 문법을 잘 모르지만 C#은 알아서 소수점 아래는 제거해주는 건지;; 아무튼 소수점 아래가 생겨버리므로 나는 JavaScript로 풀어야하니까 parseInt를 통해 정수로 계산되도록 했다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 256ms</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xC = x;</span><br><span class="line">  <span class="keyword">if</span>(x &lt; <span class="number">0</span> || (x % <span class="number">10</span> === <span class="number">0</span> &amp;&amp; x !== <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> revert = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(xC &gt; revert) &#123;</span><br><span class="line">    revert = <span class="built_in">parseInt</span>(revert * <span class="number">10</span> + xC % <span class="number">10</span>);</span><br><span class="line">    xC = <span class="built_in">parseInt</span>(xC / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> xC === revert || xC === <span class="built_in">parseInt</span>(revert / <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>Complexity Analysis</strong></p><ul><li>Time complexity : <math><mrow><mi>O</mi><mo>(</mo><msub><mi>log</mi><mn>10</mn></msub><mi mathvariant="monospace">n</mi><mo>)</mo></mrow></math><br>We divided the input by 10 for every iteration, so the time complexity is <math><mrow><mi>O</mi><mo>(</mo><msub><mi>log</mi><mn>10</mn></msub><mi mathvariant="monospace">n</mi><mo>)</mo></mrow></math></li><li>Space complexity : <math><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow></math></li></ul></blockquote><p>라는데, 복잡성 공부를 해야겠다… 댓글에서는 ‘왜 <math><mrow><mi>O</mi><mo>(</mo><msub><mi>log</mi><mn>10</mn></msub><mi mathvariant="monospace">n</mi><mo>)</mo></mrow></math>이냐 <math><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></math>이 맞다’, ‘아니다 솔루션 저자가 맞다’로 의견이 분분한 듯한데 아직 잘 모르겠다;;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/palindrome-number/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TIL 20180614</title>
    <link href="http://chiabi.github.io/2018/06/14/TIL-1/"/>
    <id>http://chiabi.github.io/2018/06/14/TIL-1/</id>
    <published>2018-06-14T11:16:32.000Z</published>
    <updated>2018-06-14T17:33:10.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="1-RGB-Challenge-리액트를-이용해-다시-만들어보기"><a href="#1-RGB-Challenge-리액트를-이용해-다시-만들어보기" class="headerlink" title="1. RGB Challenge 리액트를 이용해 다시 만들어보기"></a>1. RGB Challenge 리액트를 이용해 다시 만들어보기</h3><p>전날 배운 context를 이용하는 부분은 잘 이해가 되지 않아서 문서를 봤는데, 일단 todo 리스트 실습때 진행했던 것처럼 컴포넌트, state, props를 통해 단순하게 만들어 보는 것부터 시작해서 하나씩 변경해 봐야할 것 같다.<br>그냥 DOM API로 만들때는 금방 만들었던 것을 구조를 분리해서 컴포넌트 별로 따로 만들고 어떤 것을 상태로 할 지 어떤 것이 컴포넌트 간 공유되는 상태일지를 구분하려니 오히려 오래 걸렸다. 만약 이 게임 자체가 규모가 크다면 이렇게 컴포넌트 별로 분리하는 것은 장기적으로 봤을때 유지보수 하기에는 좀 수월해 질지 모르겠지만 현재 규모에서는 생산성면에서 별로 좋은 방법이 아닌 것 같다.  </p><p>아직 context를 이용해보지는 못했는데, 역할과 책임에 따라 정리하는 것이 가장 어렵게 느껴졌다.<br>컬러코드 컴포넌트와 공유되는 상태를 관리하는 조상 컴포넌트와의 사이에 컴포넌트가 많아져서 context를 활용해야 할 것 같다.<br>컬러 코드를 랜덤으로 계산해내는 부분은 클래스의 메소드로 만드는 것이 적합하지 않은 것 같아서 따로 함수로 빼냈는데, 이렇게 하는게 맞는지는 꼭 주말까지 완성해서 강사님의 피드백을 들을 수 있도록 해야겠다.</p><h3 id="2-기능명세-작성-과제"><a href="#2-기능명세-작성-과제" class="headerlink" title="2. 기능명세 작성 과제"></a>2. 기능명세 작성 과제</h3><p>medical factory 사이트의 로그인 / 회원가입 / 리뷰 페이지를 분석하며 어떤 명세를 통해 만들었을지 명세를 도출해보는 것이 과제였다. 구글 드라이브를 통해 정리했다. 수업시간에 명세를 너무 자세하게 작성하지 말라고 주의해주셨었는데, 자꾸 작성할 것이 늘어나서 이렇게 작성하는게 맞는지 의구심이 든다.;;  </p><p>찾아보니 기능 명세나 기술 명세에 특별한 폼은 없는 것 같았다. 그래서 그런지 이런식으로 작성해야 한다라고 딱 정리한 글도 찾기 어려웠다.<br>좀 시간이 걸렸지만, 로그인 / 회원가입 같은 경우는 대부분의 서비스에 들어가는 부분이라 왠지 구축할 때 도움이 될 것 같아서 자세히 분석해봤다. 보다보니 생각보다 누락하거나 유효하지 않은 입력에 대해 검증해야 하는 부분이 많았다. 나도 만들때 이런 부분은 신경 써줘야겠다는 생각을 하게되었다.</p><h3 id="3-git-alias"><a href="#3-git-alias" class="headerlink" title="3. git alias"></a>3. git alias</h3><p>git 명령어 몇가지를 alias로 만들어두었다. 만들어두니 <code>git flow ~</code> 명령을 쓰기가 훨씬 수월해졌다.  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gfi=<span class="string">'git flow init'</span></span><br><span class="line"><span class="built_in">alias</span> gff=<span class="string">'git flow feature'</span></span><br><span class="line"><span class="built_in">alias</span> gfr=<span class="string">'git flow release'</span></span><br><span class="line"><span class="built_in">alias</span> gfh=<span class="string">'git flow hotfix'</span></span><br><span class="line"><span class="built_in">alias</span> gfs=<span class="string">'git flow support'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> gcm=<span class="string">'git commit -m'</span></span><br><span class="line"><span class="built_in">alias</span> npxreact=<span class="string">'npx create-react-app'</span></span><br></pre></td></tr></table></figure><p>너무 많으면 또 외워야하고 잘못 사용할 수도 있을 것 같아서 긴 명령어 위주로 이정도만 해두었다.<br>작성에 사용한 명령어는 다음과 같다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure></p><h2 id="앞으로-할-일"><a href="#앞으로-할-일" class="headerlink" title="앞으로 할 일"></a>앞으로 할 일</h2><ul><li>RGB 챌린지 주말까지 완성하기(context 사용하기)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;1-RGB-Challenge-리액트를-이용해-다시-만들어보기&quot;&gt;&lt;a href=&quot;#1-RG
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL 20180613</title>
    <link href="http://chiabi.github.io/2018/06/14/TIL/"/>
    <id>http://chiabi.github.io/2018/06/14/TIL/</id>
    <published>2018-06-13T16:28:49.000Z</published>
    <updated>2018-06-14T17:06:19.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="1-프론트엔드-개발-과정-리액트-실습"><a href="#1-프론트엔드-개발-과정-리액트-실습" class="headerlink" title="1. 프론트엔드 개발 과정 - 리액트 실습"></a>1. 프론트엔드 개발 과정 - 리액트 실습</h3><p>수업시간에 Provider와 Consumenr랑 props.children이 등장했다. 정신이 혼미해진다.<br>계속 상태를 필요한 하위 컴포넌트로 내려보내야 한다면 불편하지 않나라고 생각했는데, 그부분을 context를 통해 개선할 수 있단 점이 매력적이지만 역할과 책임에 따라 분리한다거나, 쓰는 방법 자체는 여러번 써봐야겠다. </p><h3 id="2-Algorithm-문제-풀이"><a href="#2-Algorithm-문제-풀이" class="headerlink" title="2. Algorithm 문제 풀이"></a>2. Algorithm 문제 풀이</h3><p>알고리즘 문제를 푸는 건 잘 못하지만 재미있다. 특히 끙끙 거리며 풀었는데, 가장 성능이 좋은 코드와 현저하게 차이가 나면 대체 무슨 방법으로 풀었을까 엄청 궁금하다. 그래도 한번에 보기에는 좀더 고민해야 될 것 같아서 내가 푼 풀이를 좀 더 다듬었는데, 아쉽게도 별로 속도 개선이 되지 않았다. 그래서 다른 사람 풀이를 봤는데, 접근방식이 달랐다.<br>이런 점이 재미있는것 같다. 이런 식으로도 풀수 있구나 대단하다 생각하면서도 앞으로 나도 이렇게 풀어봐야지 하면서 얻게되는 게 있는것 같다.</p><hr><p>오늘은 복습을 많이 했어야 했는데, 많이 하지 못했다. 그래도 내가 많이 의지했던 언니의 고민을 들어주고 계속 우울해했던 언니의 기운을 북돋아 줄 수 있어서 오늘 하루에 그렇게 아쉬움은 없다. 대신 내일 정말 열심히 복습해야겠다.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;1-프론트엔드-개발-과정-리액트-실습&quot;&gt;&lt;a href=&quot;#1-프론트엔드-개발-과정-리액트
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Roman to Integer</title>
    <link href="http://chiabi.github.io/2018/06/13/Roman-to-Integer/"/>
    <id>http://chiabi.github.io/2018/06/13/Roman-to-Integer/</id>
    <published>2018-06-13T06:15:36.000Z</published>
    <updated>2018-06-14T19:04:30.389Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/roman-to-integer/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p><table><thead><tr><th>Symbol</th><th>Value</th></tr></thead><tbody><tr><td>I</td><td>1</td></tr><tr><td>V</td><td>5</td></tr><tr><td>X</td><td>10</td></tr><tr><td>L</td><td>50</td></tr><tr><td>C</td><td>100</td></tr><tr><td>D</td><td>500</td></tr><tr><td>M</td><td>1000</td></tr></tbody></table><p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number &gt; twenty seven is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><p>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.<br>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 143 - 152ms</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ROMAN = &#123;</span><br><span class="line">    <span class="string">'I'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'V'</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">'X'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'L'</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">'C'</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">'D'</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">'M'</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newS = s.split(<span class="string">''</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> ROMAN[item]);</span><br><span class="line">  <span class="keyword">return</span> newS.reduce(<span class="function">(<span class="params">acc, item, idx, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> before = arr[idx - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> acc + (before &lt; item &amp;&amp; before ? item - (before * <span class="number">2</span>) : item)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>다른 방법도 생각해보려고 했는데, 도저히… map(), reduce() 메소드로 배열을 두번 탐색한게 마음에 걸린다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 156ms</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ROMAN = &#123;</span><br><span class="line">    <span class="string">'I'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'V'</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">'X'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'L'</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">'C'</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">'D'</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">'M'</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">acc, item, idx, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> before = arr[idx - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> beforeInt = ROMAN[before]</span><br><span class="line">    <span class="keyword">const</span> itemInt = ROMAN[item]</span><br><span class="line">    <span class="keyword">return</span> acc + (beforeInt &lt; itemInt &amp;&amp; beforeInt ? itemInt - (beforeInt * <span class="number">2</span>) : itemInt)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>reduce 한번으로 처리하도록 변경했는데 이것도 그닥 속도가 개선되지는 않았다.</p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getIntFromRoman = &#123;</span><br><span class="line">    I: <span class="number">1</span>,</span><br><span class="line">    V: <span class="number">5</span>,</span><br><span class="line">    X: <span class="number">10</span>,</span><br><span class="line">    L: <span class="number">50</span>,</span><br><span class="line">    C: <span class="number">100</span>,</span><br><span class="line">    D: <span class="number">500</span>,</span><br><span class="line">    M: <span class="number">1000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> curr, next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        curr = getIntFromRoman[s[i]];</span><br><span class="line">        next = getIntFromRoman[s[i+<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">if</span>(curr &lt; next)</span><br><span class="line">            sum -= curr;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum += curr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum + getIntFromRoman[s[s.length<span class="number">-1</span>]];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>for문을 통해 따로 sum 에 더해주는 방식으로 처리했다. 그리고 현재 문자가 다음 문자보다 작으면 오히려 빼주는데, 그렇게 하면 4내지는 9가 나오게 되니 이렇게 풀 수도 있구나하고 깨달음이…</p><p>나는 조건 분기했는데… </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/roman-to-integer/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Add Two Numbers</title>
    <link href="http://chiabi.github.io/2018/06/12/Add-Two-Numbers/"/>
    <id>http://chiabi.github.io/2018/06/12/Add-Two-Numbers/</id>
    <published>2018-06-12T12:59:21.000Z</published>
    <updated>2018-06-17T09:11:25.294Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.<br><strong>Example</strong></p><ul><li>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</li><li>Output: 7 -&gt; 0 -&gt; 8</li><li>Explanation: 342 + 465 = 807.</li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 124ms, 176ms</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [];</span><br><span class="line">  <span class="keyword">const</span> sum = <span class="function">(<span class="params">l1, l2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">      arr.push(l1.val + l2.val)</span><br><span class="line">      sum(l1.next, l2.next);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!l2 &amp;&amp; l1) &#123;</span><br><span class="line">      arr.push(l1.val)</span><br><span class="line">      sum(l1.next);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!l1 &amp;&amp; l2) &#123;</span><br><span class="line">      arr.push(l2.val)</span><br><span class="line">      sum(l2.next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sum(l1, l2);</span><br><span class="line">  <span class="keyword">let</span> over = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> newArr = arr.map(<span class="function">(<span class="params">item, idx, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(item &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      arr[idx + <span class="number">1</span>] != <span class="literal">null</span> ? arr[idx + <span class="number">1</span>] += <span class="number">1</span> : over = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> item - <span class="number">10</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(over) &#123;</span><br><span class="line">    newArr.push(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>원래 기존 풀이는 200ms인데 좀 줄였다. 연결리스트에 대한 이해가 부족해서 좀 오래 걸렸다.<br>아래 코드가 굉장히 비효율적이라고 느껴서 위의 코드처럼 다시 만들었는데 그렇게 효율적으로 보이지는 않는다.<br>나중에 한번 더 다른 방법으로 풀어보고 다른 사람 풀이를 봐야겠다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 200ms</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> toArray = <span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = [];</span><br><span class="line">    <span class="keyword">const</span> search = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">      arr.push(node.val)</span><br><span class="line">      <span class="keyword">return</span> node.next != <span class="literal">null</span> ? search(node.next) : <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    search(list)</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr1 = toArray(l1);</span><br><span class="line">  <span class="keyword">const</span> arr2 = toArray(l2);</span><br><span class="line">  <span class="keyword">const</span> large = (arr1.length &gt;= arr2.length ? arr1 : arr2);</span><br><span class="line">  <span class="keyword">const</span> small = (arr1.length &gt;= arr2.length ? arr2 : arr1);</span><br><span class="line">  <span class="keyword">const</span> l = large.length;</span><br><span class="line">  <span class="keyword">const</span> newArr = <span class="keyword">new</span> <span class="built_in">Array</span>(l).fill(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> splice = <span class="function"><span class="params">idx</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(newArr[idx + <span class="number">1</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">      newArr.push(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(newArr[idx + <span class="number">1</span>] === <span class="number">9</span>) &#123;</span><br><span class="line">        newArr[idx + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        splice(idx + <span class="number">1</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newArr[idx + <span class="number">1</span>]++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(small[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> result = newArr[i] + large[i];</span><br><span class="line">          <span class="keyword">if</span>(result &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">              splice(i)</span><br><span class="line">              newArr[i] = result - <span class="number">10</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              newArr[i] = result;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> result = large[i] + small[i];</span><br><span class="line">          <span class="keyword">if</span>(result &gt;= <span class="number">10</span> || newArr[i] + result &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">              splice(i)</span><br><span class="line">              newArr[i] = newArr[i] + (result - <span class="number">10</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              newArr[i] = newArr[i] + result;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/06/12/TIL/"/>
    <id>http://chiabi.github.io/2018/06/12/TIL/</id>
    <published>2018-06-12T12:40:48.000Z</published>
    <updated>2018-06-12T16:25:45.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="1-프론트엔드-개발-과정-리액트-실습"><a href="#1-프론트엔드-개발-과정-리액트-실습" class="headerlink" title="1. 프론트엔드 개발 과정 - 리액트 실습"></a>1. 프론트엔드 개발 과정 - 리액트 실습</h3><p>수업시간 대부분이 실습 시간이었는데 덕분에 조금 리액트 state와 props, Component같은 기본 사용법은 익숙해지는 것 같다. 빨리 숙지해서 Redux같은 심화 부분을 들을때 어려움이 없도록 많이 연습해야겠다.</p><h3 id="2-Algorithm-문제-풀이"><a href="#2-Algorithm-문제-풀이" class="headerlink" title="2. Algorithm 문제 풀이"></a>2. Algorithm 문제 풀이</h3><p>저번 풀이는 연결 리스트에 대해 이해가 없어서 오래 걸렸다. 몇번 실행 오류 나보면서 이해하게 되었지만, 나중에 따로 정리해봐야겠다. 다른 식으로 풀어봤는데, 다행히도 저번에 푼 것보다는 효율적인 코드인 것 같다. 시간이 단축되었다. 다른 방법 딱 한번만 더 생각해보고 다른 사람 풀이 보면서 포스팅을 다시 추가해야겠다.</p><h2 id="앞으로-할-일"><a href="#앞으로-할-일" class="headerlink" title="앞으로 할 일"></a>앞으로 할 일</h2><ul><li>React 캘린더 완성하기</li><li>RGB 챌린지 React로 구현해보기</li><li>알고리즘 Add Two Numbers 다시 풀어보고 다른 사람 풀이 정리하기(데이터 구조 - 연결리스트 정리하자)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;1-프론트엔드-개발-과정-리액트-실습&quot;&gt;&lt;a href=&quot;#1-프론트엔드-개발-과정-리액트
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>leetcode - Reverse Integer</title>
    <link href="http://chiabi.github.io/2018/06/11/revese-integer/"/>
    <id>http://chiabi.github.io/2018/06/11/revese-integer/</id>
    <published>2018-06-11T11:34:55.000Z</published>
    <updated>2018-06-14T19:03:56.511Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>Given a 32-bit signed integer, reverse digits of an integer.</p><ul><li>Example 1:<ul><li>Input: 123</li><li>Output: 321</li></ul></li><li>Example 2:<ul><li>Input: -123</li><li>Output: -321</li></ul></li><li>Example 3:<ul><li>Input: 120</li><li>Output: 21</li></ul></li></ul><p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2<sup>31</sup>,  2<sup>31</sup> − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Runtime: 80 ms</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> range = <span class="number">2</span> ** <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">parseInt</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    <span class="keyword">return</span> (result &gt; (range - <span class="number">1</span>)) ? <span class="number">0</span> : x &gt;= <span class="number">0</span> ? result : result * <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>코드가 짧아보인다고 빠른게 아닌 것임을…<br>Big O Notation을 아직 제대로 이해하지 못했지만 제아무리 코드상 짧아보여도 반드시 좋은 코드인 것은 아니란 걸 알았다.(<del>그리고 나의 코드가 그런듯…</del>)</p><p><code>range = 2 ** 31</code>은 <code>Math.pow(2, 31)</code>로 구해도 될 것 같고 숫자를 문자열 화하는 방법은 다양하다. (<code>&#39;&#39; + x</code>, <code>${x}</code>, <code>x.toString()</code>…)</p><p>문제 자체가 풀기에는(정말 푼 것에만 의미를 두자면) 크게 어렵지 않았고, 나는 숫자를 reverse한다고 해서 당연히 <sup>1</sup>문자열로 만들어서, <sup>2</sup>배열화해서, <sup>3</sup><code>reverse</code>메소드로 뒤집고 다시 <sup>4</sup><code>join</code>메소드로 합쳐준 다음 <sup>5</sup>숫자화하면 되는 것 아닌가?라고 생각했다.<br>그리고 이게 거의 공식처럼 머릿속에 있었는데, 다른 사람들 풀이를 보니까 생각이 넓어지는 기분이다.</p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 64ms</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isNeg = x &lt; <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  x = <span class="built_in">Math</span>.abs(x);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(x) &#123;</span><br><span class="line">      <span class="keyword">var</span> lastDigit = x % <span class="number">10</span>; <span class="comment">// 33 % 10 = 3</span></span><br><span class="line">      result *= <span class="number">10</span>; <span class="comment">// 0</span></span><br><span class="line">      result += lastDigit; <span class="comment">// 3</span></span><br><span class="line">      x = <span class="built_in">parseInt</span>(x / <span class="number">10</span>); <span class="comment">// 3</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  result = isNeg ? -result : result;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(result &gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span> || result &lt; -<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이 풀이는 </p><ol><li>먼저 음수인지 여부를 저장해둔다.</li><li>x를 <code>Math.abs()</code>를 통해 절대값으로 만든다. </li><li>만약 그 전에 result에 저장된 값이 있으면 10을 곱해줘서 자리수를 올린다.</li><li>x를 10으로 나눈 나머지를 result에 더해준다.</li><li>x에는 다시 10으로 나눈 정수값만 저장하면서 x가 0이 될때까지 반복한다.</li><li>이렇게 reverse한 수가 음수인지 여부에 따라 다시 음수화시켜주고</li><li>만약 제한범위를 넘어서면([−2<sup>31</sup>,  2<sup>31</sup> − 1]) 0을 반환하고 아니면 result를 그대로 반환한다.</li></ol><p>위의 풀이와 비슷한데 조금 다른 풀이<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 68ms</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> MAX = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> number = <span class="number">0</span>, </span><br><span class="line">      symbol = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    x = <span class="built_in">Math</span>.abs(x);</span><br><span class="line">    symbol = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    number = number * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">    x = <span class="built_in">Math</span>.floor(x / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> number &gt; MAX ? <span class="number">0</span> : symbol * number;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 76ms</span></span><br><span class="line"><span class="keyword">const</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> isPositive = x &gt; <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> digits = (isPositive)? x.toString().split(<span class="string">""</span>).reverse()</span><br><span class="line">                    : (-x).toString().split(<span class="string">""</span>).reverse()</span><br><span class="line">    <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(digits.join(<span class="string">''</span>), <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> (num &gt;= <span class="number">2147483647</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> num * (isPositive? <span class="number">1</span>: <span class="number">-1</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이 풀이는 나의 경우 <code>Math.pow(2, 31)</code>내지는 <code>2 ** 31</code>로 구하도록 했는데 이미 구해진 값을 넣어서 연산을 하나 줄였다.</p><p>대체로 <code>while</code>문을 통해서 10을 이용한 연산을 통해 자리수를 바꿔주는 방법이 문자열 → 배열 → reverse로 하는 방법보다 빠른 것 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-integer/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>자바스크립트 모듈</title>
    <link href="http://chiabi.github.io/2018/06/11/modules/"/>
    <id>http://chiabi.github.io/2018/06/11/modules/</id>
    <published>2018-06-11T08:35:52.000Z</published>
    <updated>2018-06-11T11:47:51.497Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>패스트 캠퍼스 프론트엔드 개발 스쿨에서 배운 내용을 정리합니다.<br>내용에 오류가 있다면 댓글 남겨주시기 바랍니다.</p></blockquote><h2 id="모듈"><a href="#모듈" class="headerlink" title="모듈"></a>모듈</h2><p>큰 규모의 프로젝트에서 JavaScript 코드를 여러 파일과 폴더에 나누어 작성하고, 충돌하지 않게 서로가 서로를 효율적으로 불러올 수 있도록 해주는 시스템이 필요해졌다.</p><p>ES2015 모듈: <code>script</code>태그에 <code>type=&quot;module&quot;</code> 어트리뷰트 추가<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 모듈로서 동작한다, 파일 확장자는 대개 .mjs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"index.mjs"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>단, 다음과 같은 이유로 아직 브라우저에 내장된 모듈 기능을 사용하는 경우가 별로 없다.</p><ul><li>이전까지의 JavaScript 파일의 동작방식과 다른 동작방식을 가지고 있다.  </li><li>모듈이 제대로 동작하기 위해 <a href="https://jakearchibald.com/2017/es-modules-in-browsers/" target="_blank" rel="noopener">몇가지 조건을 충족시켜야 한다.</a></li><li>구형 브라우저는 모듈을 지원하지 않는다.</li></ul><p>대신 Webpack, Parcel 등의 모듈번들러를 통해 변환과정을 거친 뒤, 브라우저에서 일반적인 JavaScript파일로 불러오는 방법이 널리 사용되고 있는 추세이다.</p><p>모듈 번들러는 여러 자바스크립트 파일을 설정에 따라 하나 이상의 파일로 합쳐주는 프로그램이다. 최신문법을 트랜스파일링 해주는 기능까지 갖추고 있다.</p><p>모듈 번들러들은 파일간 관계를(의존성) 분석해서 모듈을 하나로 합쳐줄 때 사용하는 방식이 각자 다르다.</p><ul><li>Webpack은 <code>import</code>를 통해 분석한다.</li><li>Parcel은 html 태그를 보고도 분석한다.(html 안에 link태그 쓰고, scss를 불러오는 식으로 쓸 수 있다.)</li></ul><h3 id="1-모듈이란"><a href="#1-모듈이란" class="headerlink" title="1. 모듈이란?"></a>1. 모듈이란?</h3><p>ES2015 모듈: JavaScript코드를 담고 있는 파일  </p><ul><li><code>import</code> 혹은 <code>export</code>구문을 사용할 수 있다.</li><li>기본으로 엄격모드로 동작한다.</li><li>모듈 파일의 가장 바깥쪽에서 선언된 이름은 전역 스코프가 아니라 <strong>모듈 스코프에서 선언된다.</strong></li></ul><h3 id="2-모듈-스코프"><a href="#2-모듈-스코프" class="headerlink" title="2. 모듈 스코프"></a>2. 모듈 스코프</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// variables.js</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이 파일이 모듈로서 사용되고 있다면, `undefined`가 출력된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.foo);</span><br></pre></td></tr></table></figure><p>이 모듈스코프는 모듈 파일마다 개별적으로 존재한다.</p><p>따라서 여러 모듈의 가장 바깥쪽에서 같은 이름으로 변수, 함수, 클래스를 선언하더라도,<br>서로 다른 스코프에서 선언되기 때문에 이름의 충돌이 생길 일이 없다.</p><h3 id="3-export-amp-import"><a href="#3-export-amp-import" class="headerlink" title="3. export &amp; import"></a>3. export &amp; import</h3><p>값이 아니라 이름이 export되는 것</p><ul><li><p>모듈 스코프에서 정의된 이름은 export 구문을 통해 다른 파일에서 사용할 수 있다.</p><ul><li><p>variables.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="keyword">const</span> spam = <span class="string">'eggs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;foo, spam&#125;;</span><br></pre></td></tr></table></figure></li><li><p>functions.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;foo, spam&#125; <span class="keyword">from</span> <span class="string">'./variables.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="built_in">console</span>.log(spam);</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>함수나 클래스도 export를 통해 여러 모듈에서 재사용할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add, Person &#125;;</span><br></pre></td></tr></table></figure></li><li><p>다른 모듈에 있는 이름을 사용하려면, 반드시 모듈에서 이름을 export 해주어야 한다.<br>모듈 실행환경에 따라 에러나, 이름에 <code>undefined</code>가 들어가는 식으로 의도치 않게 동작한다.</p></li></ul><h3 id="4-선언과-동시에-export-하기"><a href="#4-선언과-동시에-export-하기" class="headerlink" title="4. 선언과 동시에 export 하기"></a>4. 선언과 동시에 export 하기</h3><p>이름을 선언하는 구문 앞에 export를 붙여주면, 선언과 export를 한꺼번에 할 수 있다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-default-export"><a href="#5-default-export" class="headerlink" title="5. default export"></a>5. default export</h3><p>모듈을 대표하는 하나의 <strong>값</strong>을 지정하고, 그 값을 다른 모듈에서 편하게 불러와서 사용할 수 있다.<br>이렇게 사용하는 값을 <strong>default export</strong>라고 부른다.</p><ul><li><p>foo.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure></li><li><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 중괄호를 생략하면, 모듈의 default export를 가져온다.</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'./foo.js'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure></li></ul><p>※ 모듈당 하나의 default export밖에 허용되지 않는다.<br>모듈에는 하나의 default export와 여러개의 named export(일반적인 export)를 지정할 수 있다.</p><p>import 구문에서 default export와 일반적인 export를 동시에 가져올 수 있다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">                        <span class="comment">// node_modules에 설치된 것은 따로 path없이 불러오면 됨</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component, Fragament&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">React</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Componet</span> </span>&#123; <span class="comment">/*...*/</span> &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment</span> </span>&#123; <span class="comment">/*...*/</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="6-다름-이름으로-export-amp-import-하기"><a href="#6-다름-이름으로-export-amp-import-하기" class="headerlink" title="6. 다름 이름으로 export &amp; import 하기"></a>6. 다름 이름으로 export &amp; import 하기</h3><p><code>export</code>혹은 <code>import</code> 하는 이름의 뒤에 <code>as</code>를 붙여 다른 이름이 대신 사용되게 할 수 있다.</p><ul><li><p>export 이름 뒤에 as</p><ul><li><p>foo.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;foo <span class="keyword">as</span> FOO&#125;;</span><br></pre></td></tr></table></figure></li><li><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;FOO&#125; <span class="keyword">from</span> <span class="string">'./foo.js'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>import 이름 뒤에 as</p><ul><li><p>foo.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="keyword">export</span> foo;</span><br></pre></td></tr></table></figure></li><li><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;foo <span class="keyword">as</span> FOO&#125; <span class="keyword">from</span> <span class="string">'./foo.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(FOO)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="7-모듈-사용-시-주의할-점"><a href="#7-모듈-사용-시-주의할-점" class="headerlink" title="7. 모듈 사용 시 주의할 점"></a>7. 모듈 사용 시 주의할 점</h3><p>모듈 번들러는 import를 하지 않으면 아예 JavaScript코드를 실행시키지 않는다.<br>모듈간의 의존관계를 다 파악한 뒤 필요한 것만 실행시킨다.</p><p>log.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'log~~~~~'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = bar;</span><br></pre></td></tr></table></figure></p><p>main.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./log'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// log~~~~가 콘솔에 출력된다.</span></span><br></pre></td></tr></table></figure></p><p>만약 다른 모듈에서도 ‘log.js’를 <code>import</code> 하더라도 ‘log~~~~’는 한번만 출력된다.<br>이는 <code>import</code>구문이 코드를 실행시키라는 명령이 아니기 때문이다.<br><code>export</code>와 <code>import</code> 구문은 단지 모듈간의 의존관계를 나타내는 것일 뿐이다.</p><p>ECMAScript 공식 명세에는 모듈을 불러오는 방법에 대한 내용이 포함되어 있지 않다.<br>모듈번들러, 브라우저마다 모듈을 불러오는 방법이나 구체적인 동작 방식은 다를 수 있다.</p><h3 id="8-ES2015-이전의-모듈들"><a href="#8-ES2015-이전의-모듈들" class="headerlink" title="8. ES2015 이전의 모듈들"></a>8. ES2015 이전의 모듈들</h3><p><a href="https://d2.naver.com/helloworld/12864" target="_blank" rel="noopener">ES2015 모듈 이전에 CommonJS, AMD 등의 모듈 시스템이 있었다.</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node.js에서 쓰는 모듈 객체</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  a: a</span><br><span class="line">  b: b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;패스트 캠퍼스 프론트엔드 개발 스쿨에서 배운 내용을 정리합니다.&lt;br&gt;내용에 오류가 있다면 댓글 남겨주시기 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;모듈&quot;&gt;&lt;a href=&quot;#모듈&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://chiabi.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chiabi.github.io/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://chiabi.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>try...catch, 자바스크립트에서의 예외 처리</title>
    <link href="http://chiabi.github.io/2018/06/11/try-catch/"/>
    <id>http://chiabi.github.io/2018/06/11/try-catch/</id>
    <published>2018-06-11T08:35:41.000Z</published>
    <updated>2018-06-11T11:47:59.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>패스트 캠퍼스 프론트엔드 개발 스쿨에서 배운 내용을 정리합니다.<br>내용에 오류가 있다면 댓글 남겨주시기 바랍니다.</p></blockquote><h2 id="예외처리"><a href="#예외처리" class="headerlink" title="예외처리"></a>예외처리</h2><p>프로그램의 언어들이 항상 완벽하게 동작하지는 않는다.<br>단순 버그이거나, 프로그래머가 잘못 작성했거나, 프로그래밍 언어 자체가 에러를 내는 경우가 있다.</p><h3 id="1-동기식-코드에서의-예외-처리"><a href="#1-동기식-코드에서의-예외-처리" class="headerlink" title="1. 동기식 코드에서의 예외 처리"></a>1. 동기식 코드에서의 예외 처리</h3><p>프론트엔드 개발자의 실수<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-1</span>) <span class="comment">// RangeError: Invalid array length</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">// ReferenceError: foo is not defined</span></span><br></pre></td></tr></table></figure><p>프론트엔드 개발자의 의도와 다른 실수<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://nonexistent-domain.nowhere'</span>); <span class="comment">// TypeError: Failed to fetch</span></span><br><span class="line"><span class="comment">// 위 주소는 맞는데 서버/네트워크 쪽 에러가 있다거나</span></span><br></pre></td></tr></table></figure></p><p>에러가 발생하면 나머지 로직이 실행되지 않는다. 그 시점에 실행 중이었던 작업을 완료할 수 없게 된다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'에러가 나기 직전까지의 코드는 잘 실행됩니다.'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-1</span>); <span class="comment">// RangeError: Invalid array length</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'에러가 난 이후의 코드는 실행되지 않습니다.'</span>); <span class="comment">// 이것은 실행되지 않는다.</span></span><br></pre></td></tr></table></figure></p><p>위와 같이 코드의 실행이 중단된다.</p><p><code>try...catch...finally</code> 구문을 사용하면 에러가 나더라도 코드의 실행을 지속할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 여기서 에러가 나면 에러가 난 시점에 코드의 흐름이</span></span><br><span class="line">  <span class="comment">// catch로 넘어간다.</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'에러가 나기 직전까지의 코드는 잘 실행됩니다.'</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-1</span>); <span class="comment">// RangeError: Invalid array length</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'에러가 난 이후의 코드는 실행되지 않습니다.'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'코드의 실행 흐름이 catch 블록으로 옮겨집니다.'</span>);</span><br><span class="line">  alert(<span class="string">`다음과 같은 에러가 발생했습니다: <span class="subst">$&#123;e.name&#125;</span>: <span class="subst">$&#123;e.message&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>try</code>: 에러가 났을 때 원상복구를 시도할 코드. 에러 발생시 코드의 실행 흐름이 <code>catch</code> 블록으로 옮겨간다.</li><li><p><code>catch</code>: 에러에 대한 정보를 담고 있는 객체(위 예제의 <code>e</code>)를 사용할 수 있다.</p><ul><li><code>e.name</code>: <code>RangeError</code>같은 에러의 이름</li><li><code>e.meassage</code>: <code>Invalid array length</code> 에러 메시지</li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'에러가 나기 직전까지의 코드는 잘 실행됩니다.'</span>);</span><br><span class="line">  <span class="comment">/* new Array(-1); */</span></span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'에러가 난 이후의 코드는 실행되지 않습니다.'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">if</span>(e.name === <span class="string">'RangeError'</span>) &#123;</span><br><span class="line">    alert(<span class="string">`배열 생성자에 잘못된 인수가 입력되었습니다.`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.name === <span class="string">`ReferenceError`</span>) &#123;</span><br><span class="line">    alert(<span class="string">`선언되지 않은 변수가 사용되고 있습니다.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'코드의 실행 흐름이 catch 블록으로 옮겨집니다.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>finally</code>: <code>try</code>블록 안에서의 에러 발생 여부와 관계 없이 무조건 실행되어야 하는 코드<br><code>return</code>, <code>break</code>, <code>continue</code>등으로 코드의 실행 흐름이 즉시 이동되더라도 실행된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`현재 i의 값: <span class="subst">$&#123;i&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>finally</code>블록은 catch 블록과도 같이 사용된다.<ul><li>에러가 안 났을 때: <strong>try - finally</strong></li><li>에러가 났을 때: <strong>try - 에러발생 - catch - finally</strong></li></ul></li></ul></li></ul><h4 id="1-1-직접-에러-발생시키기"><a href="#1-1-직접-에러-발생시키기" class="headerlink" title="1-1. 직접 에러 발생시키기"></a>1-1. 직접 에러 발생시키기</h4><p>코드를 다른 사람이나 미래의 내가 의도한 대로 사용하지 않을 경우 에러가 발생하도록 할 수 있다.</p><p><strong><code>Error</code>생성자, <code>throw</code>구문</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> even = <span class="built_in">parseInt</span>(prompt(<span class="string">'짝수를 입력하세요'</span>));</span><br><span class="line"><span class="keyword">if</span> (even % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'짝수가 아닙니다.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3을 입력할 경우</span></span><br><span class="line"><span class="comment">// Error: 짝수가 아닙니다.</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="string">'ggg'</span>;</span><br><span class="line"><span class="comment">// 던지는 것에 제한이 없으나</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'ddd'</span>)</span><br><span class="line"><span class="comment">// 반드시 에러 객체를 던져야 한다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'짝수가 아니다'</span>)</span><br><span class="line"><span class="comment">// Error는 어디서나 쓸 수 있는 객체(생성자)이다.</span></span><br><span class="line">e;</span><br><span class="line"><span class="comment">// Error: 짝수가 아니다.</span></span><br></pre></td></tr></table></figure><p>다음과 같이 내가 에러를 만들어 던질 수 있고, 이를 <code>try...catch</code> 구문으로 잡을 수 있다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> even = <span class="built_in">parseInt</span>(prompt(<span class="string">'짝수를 입력하세요'</span>));</span><br><span class="line">  <span class="keyword">if</span> (even % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'짝수가 아닙니다.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  alert(e.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>복잡한 프로그램을 짜다보면 추가적인 자세한 정보를 추가해서 에러를 만들고 싶게 된다.<br>에러의 종류를 구분해야 하거나 에러 객체에 기능을 추가해야 할 필요가 있다.</p><p>그냥 내장 에러 생성자가 아니라 내가 자체 Error 클래스를 만들경우 다음과 같은 방법이 있다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value, ...params) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...params);</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> even = <span class="built_in">parseInt</span>(prompt(<span class="string">'짝수를 입력하세요'</span>));</span><br><span class="line">  <span class="keyword">if</span> (even % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MyError(even, <span class="string">'짝수가 아닙니다.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MyError) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;e.name&#125;</span>: <span class="subst">$&#123;e.value&#125;</span> 는 <span class="subst">$&#123;e.message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>에러에서도 동기식 처리와 비동기식 처리가 있다.</p><h3 id="2-비동기식-코드에서의-예외-처리"><a href="#2-비동기식-코드에서의-예외-처리" class="headerlink" title="2. 비동기식 코드에서의 예외 처리"></a>2. 비동기식 코드에서의 예외 처리</h3><h4 id="2-1-비동기-콜백"><a href="#2-1-비동기-콜백" class="headerlink" title="2-1. 비동기 콜백"></a>2-1. 비동기 콜백</h4><p>비동기식으로 작동하는 콜백의 내부에서 발생한 에러는, 콜백 바깥에 있는 try 블록으로는 잡아낼 수 없다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 비동기 코드 안의 에러는 잡히지 않는다.</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'에러!'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught Error: 에러!</span></span><br><span class="line"><span class="comment">// 에러가 잡히지 않아서 생기는 에러;;</span></span><br></pre></td></tr></table></figure></p><p>JavaScript 엔진은 에러가 발생하는 순간 호출 스택을 되감는 과정을 거친다.<br>이 과정 중에 <code>try</code> 블록을 만나야 코드의 실행 흐름을 원상복구시킬 수 있다.</p><p><strong>에러는 호출스택과 관련되어 있다.</strong>  </p><p>아래는 동기식 예외 발생<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 에러를 이곳에서 발생시키고</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> add(x, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2AndPrint</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// try... catch 구문이 여기있지만</span></span><br><span class="line">  <span class="comment">// 자바스크립트 실행 엔진이 에러가 발생하면 호출 스택을 하나씩 지워가면서 </span></span><br><span class="line">  <span class="comment">// try가 있는지 찾아본다.</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 여기서 add2를 호출하고 add2는 add를 호출하기 때문에 에러가 잡힌다.</span></span><br><span class="line">    <span class="keyword">const</span> result = add2(x);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    alert(<span class="string">'잡았다!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add2AndPrint(<span class="number">3</span>); <span class="comment">// alert으로 '잡았다!'가 뜬다.</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 에러를 이곳에서 발생시키고</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 호출스택을 되감다 가장 먼저 만나는 try에서 에러가 잡힌다.</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> add(x, <span class="number">2</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    alert(<span class="string">'add2에서 잡히나?'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2AndPrint</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = add2(x);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    alert(<span class="string">'잡았다!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add2AndPrint(<span class="number">3</span>); <span class="comment">// alert으로 'add2에서 잡히나?'가 뜬다.</span></span><br></pre></td></tr></table></figure><p>비동기 콜백이라면 단순 <code>try...catch</code> 구문으로는 잡을 수 없다.<br>비동기 콜백이 실행될 때는 이미 호출스택이 비워져 <code>try</code>를 찾을 수 없다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 이 콜백이 일단 태스크큐에 들어갔다가 호출 스택이 비워지면 실행된다.</span></span><br><span class="line">    <span class="comment">// 호출스택을 되감아 가면서 try를 찾아야하는데</span></span><br><span class="line">    <span class="comment">// 이 콜백이 실행될 때는 이미 호출스택이 비워졌으므로 try를 찾을 수 없다.</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> add(x, <span class="number">2</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    alert(<span class="string">'add2에서 잡히나?'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2AndPrint</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = add2(x);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    alert(<span class="string">'잡았다!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add2AndPrint(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p>따라서, 비동기 콜백 내부에 <code>try</code>를 작성해주어야 한다.</p><p><a href="https://codepen.io/dbeat999/pen/bKqdwW" target="_blank" rel="noopener">이벤트 리스너와 try catch 블록 예제</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buttonEl = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  buttonEl.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-1</span>);</span><br><span class="line">      alert(<span class="string">'버튼이 눌렸습니다.'</span>);      </span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      alert(<span class="string">'이벤트 리스너 안에서 에러가 발생했습니다.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)  </span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  alert(<span class="string">'에러가 발생했습니다.'</span>); <span class="comment">// 출력되지 않음</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-Pomise"><a href="#2-2-Pomise" class="headerlink" title="2-2. Pomise"></a>2-2. Pomise</h4><p>Promise 객체는 세 가지 상태를 가질 수 있다.</p><ul><li>pending - Promise 객체에 결과값이 채워지지 않은 상태</li><li>fulfilled - Promise 객체에 결과값이 채워진 상태(이때 <code>then</code>메소드 또는 <code>await</code>를 통해 무언가를 실행했다.)</li><li><strong>rejected - Promise 객체에 결과값을 채우려고 시도하다가 에러가 난 상태</strong><ul><li><code>then</code>메소드에 첫 번째 인수로 넘겨준 콜백이 실행되지 않고, <strong>두 번째 인수로 넘겨준 콜백이 실행된다.</strong> 그리고 이 콜백에는 <strong>에러 객체가 첫번째 인수로 주어진다.</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> even = <span class="built_in">parseInt</span>(prompt(<span class="string">'짝수를 입력하세요'</span>));</span><br><span class="line">  <span class="keyword">if</span> (even % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'짝수가 아닙니다.'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 짝수면 fullfiled되어 then메소드의 첫번째 인수로 들어간 함수가 실행</span></span><br><span class="line">    resolve(even);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// then 콜백에서 반환된 값이 다음Promise의 값이 된다.</span></span><br><span class="line">p.then(<span class="function"><span class="params">even</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'짝수입니다.'</span>;</span><br><span class="line">&#125;, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> e.message;</span><br><span class="line">&#125;).then(alert);</span><br><span class="line"><span class="comment">// .then(msg =&gt; alert(msg))와 같음</span></span><br></pre></td></tr></table></figure><p><code>Promise</code>가 rejected 상태가 되었을 때 <code>catch</code> 메소드를 통해 다음과 같은 방법으로도 에러 처리 콜백을 지정해 줄 수 있다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function"><span class="params">even</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'짝수입니다.'</span>;</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> e.message;</span><br><span class="line">&#125;).then(alert);</span><br></pre></td></tr></table></figure></p><h4 id="2-3-비동기-함수"><a href="#2-3-비동기-함수" class="headerlink" title="2-3. 비동기 함수"></a>2-3. 비동기 함수</h4><p>비동기 코드에서의 <code>try...catch</code>와 비동기 함수에서의 <code>try...catch</code>는 다르게 동작한다. (내부 동작 방식이 완전히 다르다. - 비동기 함수를 사용하면 예외처리도 보다 편하게 할 수 있다.)</p><p>비동기 함수 내부에서는, rejected 상태가 된 <code>Promise</code>객체를 동기식 예외처리 방식과 동일하게 <code>try...catch...finally</code> 구문으로 처리할 수 있다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ※ 단, Promise 객체에 대해 await 구문을 사용해야만 </span></span><br><span class="line">    <span class="comment">// 에러가 발생했을 때 catch 블록으로 코드의 실행 흐름이 이동한다.</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">'https://nonexistent-domain.nowhere'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(); <span class="comment">// 출력 결과: Failed to fetch</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;패스트 캠퍼스 프론트엔드 개발 스쿨에서 배운 내용을 정리합니다.&lt;br&gt;내용에 오류가 있다면 댓글 남겨주시기 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;예외처리&quot;&gt;&lt;a href=&quot;#예외처리&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://chiabi.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chiabi.github.io/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://chiabi.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>TIL 20180611</title>
    <link href="http://chiabi.github.io/2018/06/11/TIL-1/"/>
    <id>http://chiabi.github.io/2018/06/11/TIL-1/</id>
    <published>2018-06-11T08:35:06.000Z</published>
    <updated>2018-06-11T13:32:53.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="1-프론트엔드-개발-스쿨-과정"><a href="#1-프론트엔드-개발-스쿨-과정" class="headerlink" title="1. 프론트엔드 개발 스쿨 과정"></a>1. 프론트엔드 개발 스쿨 과정</h3><p>오늘은 예외 처리(<code>try...catch</code>)와 모듈부분 진도를 나가고 리액트 실습(todoList)을 했다.</p><p>예외 처리 부분은 중간프로젝트 하면서 미리 읽어봤었는데, 호출스택과 태스크 큐에서의 코드 동작원리까지 같이 설명해주시니 좀 더 깊이있게 이해되는 것 같다.</p><p>리액트 컴포넌트 간의 변경사항 공유 때문에 조상 컴포넌트에서 상태를 관리하니까 컴포넌트를 나눌때마다 상태도 내려보내줘야해서 헷갈린다.<br>아직까지 배운 내용에서는 내가 중간 프로젝트때 가장 하위의 template에 여러 정보를 담은 객체를 상위 template으로부터 내려보내느라 그 사이의 하위 template에도 똑같이 그 객체를 내려보내줬던 방식과 크게 다르지 않은 것 같다.<br>Redux나 Context를 통해서 이런 부분을 효율적으로 관리할 수 있다는데, 어떤식으로 만들었길래 그게 가능할까 신기하다.  </p><p>강사님과 실습 시간에 어떤 메소드는 하위 컴포넌트에서 작성하고 어떤 메소드는 상태를 관리하고 있는 App 컴포넌트에 작성했다. 그러면서 역할과 책임에 대한 말씀을 해주셨다.<br>역할과 책임을 어떻게 정해야할지는 프로젝트를 진행할때마다 어렵게 느껴진다. 정답이 있는 건 아닌것 같은데 어떻게 코드를 짜야 역할과 책임에 맞게 코드를 작성하게 되는 건지 아직은 감이 잡히지 않아서 많이 만들어봐야겠다.</p><h3 id="2-Algorithm-문제-풀이"><a href="#2-Algorithm-문제-풀이" class="headerlink" title="2. Algorithm 문제 풀이"></a>2. Algorithm 문제 풀이</h3><p>다른 사람들 풀이를 보니까 숫자를 거꾸로 만드는 방법에 대해서 다른 방법을 알게 되었다. 어제 풀었지만 차마 포스팅할 수 없는 부끄러운 풀이라 좀 더 다듬으면 포스팅하자고 미뤄둔 문제도 숫자를 문자열화하는 식으로 풀었는데, 이번 문제를 좀 더 응용하면 새로운 방식으로 풀 수 있을 것 같다.</p><h3 id="3-React-캘린더-만들기"><a href="#3-React-캘린더-만들기" class="headerlink" title="3. React 캘린더 만들기"></a>3. React 캘린더 만들기</h3><p>moment.js를 사용하고 있는데, 캘린더의 body 부분의 표를 짜는 것만 구하면 수월할 것 같은데, 아직 못 만들었다. 하지만 어젯밤에 자기 전에 생각해본 것을 좀 더 수정해보면 될 것 같다.</p><h2 id="앞으로-할-일"><a href="#앞으로-할-일" class="headerlink" title="앞으로 할 일"></a>앞으로 할 일</h2><ul><li>React 캘린더 완성하기</li><li>JSX 공부하기</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;1-프론트엔드-개발-스쿨-과정&quot;&gt;&lt;a href=&quot;#1-프론트엔드-개발-스쿨-과정&quot; cla
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL 20180610</title>
    <link href="http://chiabi.github.io/2018/06/11/TIL/"/>
    <id>http://chiabi.github.io/2018/06/11/TIL/</id>
    <published>2018-06-10T15:03:46.000Z</published>
    <updated>2018-06-10T17:19:14.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="1-리액트-캘린더-프로젝트"><a href="#1-리액트-캘린더-프로젝트" class="headerlink" title="1. 리액트 캘린더 프로젝트"></a>1. 리액트 캘린더 프로젝트</h3><p>리액트 연습삼아 리액트로 jQuery의 Datepicker같은 캘린더를 만들고 있다.<br>연습으로 만들어보는 건데 나에게 좀 어려운 것 같다. 리액트 문서도 다시 찾아보면서 하고 있다. 생각보다 한 것이 없는데 하루가 금방 지나가버려서 마음이 조급해진다. 좀더 시간을 잘 쪼개서 써야겠다.</p><h2 id="앞으로-할-일"><a href="#앞으로-할-일" class="headerlink" title="앞으로 할 일"></a>앞으로 할 일</h2><ul><li>React 캘린더 완성하기</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;1-리액트-캘린더-프로젝트&quot;&gt;&lt;a href=&quot;#1-리액트-캘린더-프로젝트&quot; class=&quot;
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>스캐폴딩, CRUD, 퍼머링크</title>
    <link href="http://chiabi.github.io/2018/06/09/DG-scaffolding/"/>
    <id>http://chiabi.github.io/2018/06/09/DG-scaffolding/</id>
    <published>2018-06-08T15:00:00.000Z</published>
    <updated>2018-06-09T13:11:06.676Z</updated>
    
    <content type="html"><![CDATA[<p>hexo로 블로그 만들면서 모르는 용어를 정리했다. </p><h2 id="1-스캐폴딩-scaffolding"><a href="#1-스캐폴딩-scaffolding" class="headerlink" title="1. 스캐폴딩(scaffolding)"></a>1. 스캐폴딩(scaffolding)</h2><p>건축용어로 비계라는 의미인데, 작업을 위해 임시로 설치한 가설 발판이나 가설 구조물을 말한다.<br>프로그래밍 쪽에서는 데이터베이스의 각 테이블에 대한 웹 페이지를 자동으로 생성하는 Dynamic Data 요소를 말한다. </p><p>이렇게 자동 생성된 웹 페이지를 통해 각 테이블에 대해 만들기, 읽기, 업데이트 및 삭제(CRUD) 작업을 수행할 수 있다. 스캐폴딩을 구성하는 템플릿을 사용해 효율적인 데이터 기반 웹 사이트를 신속하게 작성할 수 있다.<br>개발 중인 코드가 제 모습을 가지기 전까지 임시 스캐폴딩 코드를 코드 구조를 잡는데 사용한다고 한다.</p><p>정리하면 웹 개발 프레임워크(ASP.NET이나 Ruby on Rails등)에서 단순한 CRUD 서비스 프로세스를 구축하도록 지원하는 템플릿 개념인 것 같다.</p><h4 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h4><ul><li><a href="https://msdn.microsoft.com/ko-kr/library/ee377606.aspx" target="_blank" rel="noopener">ASP.NET Dynamic Data 스캐폴딩</a></li><li><a href="http://www.hanbit.co.kr/channel/category/category_view.html?cms_code=CMS8530510636" target="_blank" rel="noopener">Ruby on Rails - 스캐폴딩</a></li></ul><h2 id="2-CRUD"><a href="#2-CRUD" class="headerlink" title="2. CRUD"></a>2. CRUD</h2><p><strong>C</strong>reate, <strong>R</strong>ead, <strong>U</strong>pdate, <strong>D</strong>elete<br>대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능을 묶어서 일컫는 말.<br>사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신)을 가리키는 용어로서도 사용된다.</p><h4 id="참고-1"><a href="#참고-1" class="headerlink" title="참고"></a>참고</h4><ul><li><a href="https://ko.wikipedia.org/wiki/CRUD" target="_blank" rel="noopener">[위키백과] - CRUD</a></li></ul><h2 id="3-퍼머링크-permalink"><a href="#3-퍼머링크-permalink" class="headerlink" title="3. 퍼머링크(permalink)"></a>3. 퍼머링크(permalink)</h2><p>인터넷에서 특정 페이지에 영구적으로 할당된 URL 주소를 뜻한다.<br>영구적인 주소라는 뜻인데 한국에서는 고유 링크, 고유 주소라는 명칭으로 광범위하게 퍼져있다.</p><p>퍼머링크를 사용하는 대표적인 사례는 블로그.<br>시간이 지남에 따라 새로운 내용이 추가되면서 블로그 글의 위치가 쉽게 변하므로, 각각의 글에 영원히 고정된 주소를 제공하는 것이라고 위키백과에 정의되어 있다.</p><p><a href="https://hexo.io/ko/docs/permalinks.html" target="_blank" rel="noopener">hexo</a>에서는 <code>_config.yml</code> 파일이나 font-matter(파일 시작 시 작성하는 YAML, JSON 구역 - 게시물에 대한 환경설정을 하는 곳)에 각 포스트의 permalink의 형식을 지정할 수 있게 한다.</p><p>hexo 설치시 처음 _config.yml에는 아래와 같이 되어있는데<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure></p><p>결과는 <code>2018/06/09/hello-world</code>로 나온다.</p><h4 id="참고-2"><a href="#참고-2" class="headerlink" title="참고"></a>참고</h4><ul><li><a href="https://ko.wikipedia.org/wiki/%ED%8D%BC%EB%A8%B8%EB%A7%81%ED%81%AC" target="_blank" rel="noopener">[위키백과] 퍼머링크</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hexo로 블로그 만들면서 모르는 용어를 정리했다. &lt;/p&gt;
&lt;h2 id=&quot;1-스캐폴딩-scaffolding&quot;&gt;&lt;a href=&quot;#1-스캐폴딩-scaffolding&quot; class=&quot;headerlink&quot; title=&quot;1. 스캐폴딩(scaffolding
      
    
    </summary>
    
      <category term="Dev Glossary" scheme="http://chiabi.github.io/categories/Dev-Glossary/"/>
    
    
      <category term="glossary" scheme="http://chiabi.github.io/tags/glossary/"/>
    
  </entry>
  
  <entry>
    <title>TIL 20180609</title>
    <link href="http://chiabi.github.io/2018/06/09/TIL-20180609/"/>
    <id>http://chiabi.github.io/2018/06/09/TIL-20180609/</id>
    <published>2018-06-08T15:00:00.000Z</published>
    <updated>2018-06-12T14:58:48.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="1-hexo로-블로그를-만들었다"><a href="#1-hexo로-블로그를-만들었다" class="headerlink" title="1. hexo로 블로그를 만들었다."></a>1. hexo로 블로그를 만들었다.</h3><p>금요일, 소프트웨어 공학 특강시간에 최우영 강사님이 보여주신 <a href="https://wayhome25.github.io/til/2017/02/16/TIL/" target="_blank" rel="noopener">초보몽키의 개발공부로그</a>라는 블로그에 감명받아 당장 블로그를 만들었다. 사실 그전에도 알고리즘 퀴즈 관련해서 구글에서 검색하면 거의 매번 보이던 블로그였는데, 학원 수강생이었다는 거에 충격이랄지 나도 저렇게 열심히 살아야겠다는 자극을 받았다. </p><p><a href="https://hexo.io/ko/index.html" target="_blank" rel="noopener">hexo</a> + <a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">icarus 테마</a> + github page로 블로그를 만들었다.<br>어느정도 파악해보려고 열어봤더니 EJS와 Stylus의 조합이라 당황스러웠다.<br>처음에는 체감상 Jekyll보다 어렵게 느껴졌는데(Jekyll 테마는 Sass였다.) 보다보니 익숙해지는 것 같다. 스타일은 아직 수정한 것이 없는데, 테마 자체의 디자인도 마음에 들지만 천천히 바꿔봐야겠다.<br>예를들면 모바일에서는 헤더를 상단에 픽스시킨다든지 정도의 커스터마이징은 필요해보인다.</p><p>만드는 것도 파악하는 것도 오래 걸려서, 저번 Jekyll 블로그처럼 학원 과정 끝나고 시간이 남으면 만들까 생각도 했는데, 일단 만들어놓고 천천히 바꾸자는 생각으로 만들었더니 하길 잘했다는 생각이 든다. github와 다르게 좀 더 글이 정제되어 보인다.</p><p>프로필 일러스트도 하는김에 만들었다.(이놈의 디자인 욕심…) 마침 github가 로키(턱시도 고양이)여서 로키 일러스트를 만들었다. 생각보다 금방 구상하고 오랜만에 일러 만지느라 헤맨 것 치고는 시간도 얼마 소요되지 않았다.(다행이다. 오래걸렸으면 자괴감이 들었을지도…)</p><p>지난 TIL과 알고리즘 풀이는 블로그로 옮길지, 아니면 기존 github 레포지토리로 남길지는 생각해봐야겠다. </p><h3 id="2-스캐폴딩-퍼머링크-등-모르는-용어를-정리했다"><a href="#2-스캐폴딩-퍼머링크-등-모르는-용어를-정리했다" class="headerlink" title="2. 스캐폴딩, 퍼머링크 등 모르는 용어를 정리했다."></a>2. 스캐폴딩, 퍼머링크 등 모르는 용어를 정리했다.</h3><p>hexo로 블로그를 만들려다 보니 모르는 용어가 많았다.<br>스캐폴딩, CRUD, 퍼머링크를 정리하는 것으로 첫 포스팅을 하기로 했다. 대부분 데이터베이스나 서버 개발 쪽 아니면 아키텍처 관련 용어인듯하다. 데이터베이스 쪽도 생활코딩같은 강의를 통해서 틈틈이 공부해야겠다. 모르는 용어가 점점 줄어들었으면 좋겠다. (하지만 또 새로운 게 생겨나겠지…)</p><h2 id="앞으로-할-일"><a href="#앞으로-할-일" class="headerlink" title="앞으로 할 일"></a>앞으로 할 일</h2><ul><li>React로 간단한 미니 프로젝트 만들기(학원내 스터디)</li><li>JSX 공부하기</li></ul><hr><p>모르는 게 많으니까 해야겠다 하는 것도 점점 많아진다. 그리고 알면 알수록 부족함이 보여서 더더욱 심해지는 것 같다. 이럴때일수록 무엇을 먼저 할지 우선 순위를 빠르게 정하고 밀고 나가야겠다.  </p><p>블로그 만들면서 오랜만에 나를 프론트엔드 개발의 길로 이끈 블로그에 들어갔다. <a href="https://hyunseob.github.io/page/4/" target="_blank" rel="noopener">HyunSeob이라는 분의 블로그</a>인데, hexo로 만들었다는 포스팅을 봤던 기억이 나서 다시 찾아봤다. (오랜만에 읽어보다 이 마음에 드는 테마도 건졌다.)<br>그 당시 gulp로 Sass를 써보다가 Webpack을 사용해보자면서 검색하다 보게 된 블로그였다. 포스팅이 엄청 많은 것은 아니지만, 1년 안에 포스팅한 내용이 Node.js, Webpack, AngularJS, CoffeScript, TypeScript등이어서 적잖게 충격을 받았다.<br>이렇게 열심히 트랜드를 쫓아가는구나, 나도 머물러 있으면 안 되겠다는 자극을 받았다.</p><p>그때의 마음을 항상 잊지 않으려한다. 지치지 않고 계속 달릴 수 있으면 좋겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;1-hexo로-블로그를-만들었다&quot;&gt;&lt;a href=&quot;#1-hexo로-블로그를-만들었다&quot; c
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
</feed>
