<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chiabi&#39;s dev blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chiabi.github.io/"/>
  <updated>2018-08-08T14:58:13.318Z</updated>
  <id>http://chiabi.github.io/</id>
  
  <author>
    <name>chiabi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/08/TIL/"/>
    <id>http://chiabi.github.io/2018/08/08/TIL/</id>
    <published>2018-08-08T14:48:20.000Z</published>
    <updated>2018-08-08T14:58:13.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="블로그-검색엔진-최적화"><a href="#블로그-검색엔진-최적화" class="headerlink" title="블로그 검색엔진 최적화"></a>블로그 검색엔진 최적화</h3><p>대부분의 글이 알고리즘 문제 풀이나 TIL뿐이어서 블로그 검색엔진 최적화를 계속 제일 나중에 할 일로 미루다가 오늘 했다.<br>hexo 블로그의 검색엔진 최적화 방법을 엄청 잘 정리해주신 글이 있어서 참고했다.</p><ul><li><a href="https://futurecreator.github.io/2016/06/15/hexo-google-site-search-console-analytics/" target="_blank" rel="noopener">구글(Goolge) 사이트 등록(Search Console)과 검색엔진 최적화(SEO)</a></li></ul><h3 id="Jest-Typescript-연결리스트"><a href="#Jest-Typescript-연결리스트" class="headerlink" title="Jest + Typescript + 연결리스트"></a>Jest + Typescript + 연결리스트</h3><p>Jest로 테스트하는 걸 연습하면서 타입스크립트를 써보면서 연결리스트를 구현하고 있다. 연결리스트를 좀 잘못 생각하고 있던 게 있어서 다시 짜면서 만들어보고 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;블로그-검색엔진-최적화&quot;&gt;&lt;a href=&quot;#블로그-검색엔진-최적화&quot; class=&quot;head
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/07/TIL/"/>
    <id>http://chiabi.github.io/2018/08/07/TIL/</id>
    <published>2018-08-07T14:26:29.000Z</published>
    <updated>2018-08-08T14:56:07.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="You-don’t-know-JS-값-정리중"><a href="#You-don’t-know-JS-값-정리중" class="headerlink" title="You don’t know JS: 값 정리중"></a>You don’t know JS: 값 정리중</h3><p>내용은 어렵지 않은데, ‘슬롯’이라는 용어를 처음 봤다. 슬롯이 뭐지? 슬롯 머신??? 그런데 딱히 ‘array slot’, ‘javascript slot’ 뭐 이런 키워드로 검색해도 나오지 않는 것 보면 어떤 정식 명칭 같은 것은 아니고 그냥 슬롯 머신의 그 슬롯처럼 영어 뜻 그대로 ‘무언가 들어갈 자리, 구멍’의 의미로 쓴 것 같다. </p><p>그리고 검색하다가 나온건데 웹컴포넌트 관련해서 <code>&lt;slot&gt;</code>태그가 있다.</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot" target="_blank" rel="noopener">HTML slot</a></li></ul><h3 id="Jest와-타입스크립트-같이-쓰는-환경-구성"><a href="#Jest와-타입스크립트-같이-쓰는-환경-구성" class="headerlink" title="Jest와 타입스크립트 같이 쓰는 환경 구성"></a>Jest와 타입스크립트 같이 쓰는 환경 구성</h3><p>이왕 Jest도 공부하면서 타입스크립트로 같이 공부하자는 생각에 일단 환경을 설정했다.</p><p>참고한 글</p><ul><li><a href="https://gongzza.github.io/javascript/learning-typescript-with-jest/" target="_blank" rel="noopener">Jest로 TypeScript 학습테스트 환경 만들기</a></li></ul><h3 id="구입한-책"><a href="#구입한-책" class="headerlink" title="구입한 책"></a>구입한 책</h3><ul><li><a href="https://kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;ejkGb=KOR&amp;barcode=9791160505061&amp;orderClick=JAj" target="_blank" rel="noopener">누구나 자료 구조와 알고리즘</a></li><li><a href="https://kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;ejkGb=KOR&amp;barcode=9791186697641&amp;orderClick=JAj" target="_blank" rel="noopener">누구나 쉽게 배우는 챗봇 서비스</a></li></ul><p>(의도한 것은 아니지만 출판사가 다른데도 책 제목이 너무나 쉽게 가려는 나의 마음을 반영하는 것 같군…)<br>서점 들린김에 읽어보다가 마음에 들어서 구입했다. 특히 챗봇은 취향저격이라. 공부하고 싶었던 것들이 한번에…(오오 폴리머!! 파이어베이스!!! 슬랙봇!!!) 책 따라서 만들어보고 리액트로도 도전해보는 걸 목표로 해야겠다. 나도 슬랙봇 만들어야지!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;You-don’t-know-JS-값-정리중&quot;&gt;&lt;a href=&quot;#You-don’t-know
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/06/TIL/"/>
    <id>http://chiabi.github.io/2018/08/06/TIL/</id>
    <published>2018-08-05T15:00:00.000Z</published>
    <updated>2018-08-07T06:49:57.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="Move-Zeroes-파이썬-문제풀이"><a href="#Move-Zeroes-파이썬-문제풀이" class="headerlink" title="Move Zeroes 파이썬 문제풀이"></a>Move Zeroes 파이썬 문제풀이</h3><p>어제 풀었던 Move Zeroes 문제에 파이썬 풀이도 추가했다. 파이썬으로 풀어보면서 리스트가 자바스크립트의 배열과 어떻게 다른지도 알아볼 수 있었다. 그리고 좀 신기했던 게 다른 사람 풀이를 보면서 또 찾아봤는데, 자바스크립트에서 분해대입이 아닌 이상은 변수를 콤마로 구분해 같이 선언하고 할당하는 게 안되는데, 파이썬에서는 가능하다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>, b = <span class="number">2</span>; <span class="comment">// 이것은 가능하지만</span></span><br><span class="line"><span class="keyword">const</span> a, b = <span class="number">1</span>, <span class="number">2</span>; <span class="comment">// 이것은 불가능하다. </span></span><br><span class="line"><span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>, b = <span class="number">2</span> </span><br><span class="line"><span class="comment"># 이것은 불가능하지만</span></span><br><span class="line"><span class="comment"># SyntaxError: can't assign to literal</span></span><br><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="comment"># 이것은 가능하다</span></span><br></pre></td></tr></table></figure><p>좀 헷갈리기는 하는데, 다른 언어를 배우면서 비교해보는 것도 재미있다. 파이썬에서 내 기준 묘한 사용법을 보게되면, ‘어 이거 자바스크립트는 안되지 않나?’하면서 테스트해보고 비교해보니까 같이 공부가 된다.</p><h3 id="You-don’t-know-JS-타입-정리"><a href="#You-don’t-know-JS-타입-정리" class="headerlink" title="You don’t know JS: 타입 정리"></a>You don’t know JS: 타입 정리</h3><p>카일 심슨의 You don’t know JS를 보면서 내용을 정리하고 이전에 배웠던 내용을 정리하고 있다.<br>책을 읽으면서 정리하려고 했는데 번역이 조금 아쉬웠다. 예를 들면 ‘<code>null</code>은 <code>falsy</code>한 유일한 원시 값이지만, 타입은 <code>object</code>인 특별한 존재다.’라는 문장이 있었다. <code>undefined</code>도 <code>0</code>도 빈문자열도 다 <code>falsy</code>인 원시값인데 왜 저렇게 썼지 의문이 들어서 github에 올려져 있는 원문을 찾았다. </p><blockquote><p>null is the only primitive value that is “falsy” (aka false-like; see Chapter 4) but that also returns “object” from the typeof check.</p></blockquote><p>라고 되어있는데 이문장을 ‘<code>null</code>은 <code>falsy</code>이면서, <code>typeof</code> 체크에서 <code>object</code>를 반환하는 유일한 원시값이다.’라고 번역했어야 되지 않을까 싶다.(이문장도 매끄러운 번역인지는 잘 모르겠다. 부끄럽게도 영어를 잘 못한다…)<br>그래서 원문이랑 책을 번갈아 보기로 했다.<br>자바스크립트에 대한 이해가 없었을 때는 좀 어렵게 느껴진 책이었는데, 지금은 놓치고 있는 자바스크립트의 특성을 하나씩 짚어내면서 더 깊이 다지는 느낌으로 읽을 수 있게 되었다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;Move-Zeroes-파이썬-문제풀이&quot;&gt;&lt;a href=&quot;#Move-Zeroes-파이썬-문
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/05/TIL/"/>
    <id>http://chiabi.github.io/2018/08/05/TIL/</id>
    <published>2018-08-05T14:36:59.000Z</published>
    <updated>2018-08-07T06:30:15.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="이력서-작성"><a href="#이력서-작성" class="headerlink" title="이력서 작성"></a>이력서 작성</h3><p>이력서 작성하는 게 공부하는 것보다 제일 어려운 것 같다. 특히 자소서….</p><h3 id="Move-Zeroes-알고리즘-문제풀이"><a href="#Move-Zeroes-알고리즘-문제풀이" class="headerlink" title="Move Zeroes 알고리즘 문제풀이"></a>Move Zeroes 알고리즘 문제풀이</h3><p>나는 이 문제에서 splice와 push 메서드를 빼면 원본 배열의 변형을 주면서 어떻게 풀 수 있을까 생각이 잘 안났는데, 내가 loop를 한번만 도는 것에만 집중해서 그런 것 같다. 다른 사람의 풀이를 보니 for문을 두번 사용했지만 메서드 없이 인덱싱만으로 풀어냈다. 그리고 2번째 for문은 0이 들어갈 자리의 개수만큼만 도니까 그리 비효율적이지도 않다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;이력서-작성&quot;&gt;&lt;a href=&quot;#이력서-작성&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Moved ZeroS</title>
    <link href="http://chiabi.github.io/2018/08/05/moveZeroes/"/>
    <id>http://chiabi.github.io/2018/08/05/moveZeroes/</id>
    <published>2018-08-05T14:35:38.000Z</published>
    <updated>2018-08-07T06:07:16.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p><p><strong>Example:</strong></p><ul><li>Input: [0,1,0,3,12]</li><li>Output: [1,3,12,0,0]</li></ul><p><strong>Note:</strong><br>You must do this in-place without making a copy of the  array.<br>Minimize the total number of operations.</p></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>원본 배열에 변형을 주는 <code>splice()</code> 메서드와 <code>push()</code> 메서드를 사용했다. 배열 요소가 0일경우 splice 메서드를 통해 해당 요소는 삭제하고 push 메서드를 통해 0을 배열의 뒤쪽에 추가해줬다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 68ms</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, l = nums.length;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; l) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] === <span class="number">0</span>) &#123;</span><br><span class="line">            nums.splice(i, <span class="number">1</span>);</span><br><span class="line">            nums.push(<span class="number">0</span>);</span><br><span class="line">            l--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>자바스크립트에서 푼 풀이방법으로 list의 메서드를 이용해 풀었다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span>  range(l):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span>:</span><br><span class="line">                nums.remove(<span class="number">0</span>)</span><br><span class="line">                nums.append(<span class="number">0</span>)</span><br><span class="line">                l -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>count() 메서드를 통해 0인 요소의 개수를 세어 그만큼 for문을 돌리는 방법을 사용했다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = nums.count(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span>  range(l):</span><br><span class="line">            nums.remove(<span class="number">0</span>)</span><br><span class="line">            nums.append(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><h3 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>0이 아닌 요소만 다시 배열에 순서대로 담아주고, index부터 총 길이까지 0을 추가해줬다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            nums[index] = nums[i];</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt; nums.length; i++) &#123;</span><br><span class="line">        nums[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != <span class="number">0</span>:</span><br><span class="line">                nums[idx], nums[i] = nums[i], nums[idx]</span><br><span class="line">                idx += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>자바스크립트에서는 객체와 변수의 분해대입이 아니라면 변수를 <code>,</code>(콤마)로 구분해 값을 한번에 할당할 수가 없는데, 파이썬에서는 가능하다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a, b = <span class="number">1</span>, <span class="number">2</span>; <span class="comment">// 이것은 문법적으로 허용되지 않고</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = b = <span class="number">1</span>; <span class="comment">// 이것은 b가 전역 변수가 되기 때문에 좋은 방법이 아니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 대신 다음과 같은 객체와 배열의 분해대입은 가능하다.</span></span><br><span class="line"><span class="keyword">const</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">const</span> &#123;a, b&#125; = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p><p>파이썬에서는 다음과 같은 방법으로 변수를 만들 수 있다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">a, b = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(a, b) = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">[a, b] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a = b = <span class="string">'python'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero 
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/04/TIL/"/>
    <id>http://chiabi.github.io/2018/08/04/TIL/</id>
    <published>2018-08-04T14:12:44.000Z</published>
    <updated>2018-08-04T16:59:11.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="House-Robber-알고리즘-문제풀이"><a href="#House-Robber-알고리즘-문제풀이" class="headerlink" title="House Robber 알고리즘 문제풀이"></a>House Robber 알고리즘 문제풀이</h3><p>프로그래머스의 땅따먹기 문제의 악몽이… 생각보다 어려워서 조금 시간이 걸렸다. 처음에는 막연히 filter랑 reduce 같은 걸 써야하나?라고 생각했는데 그보다는 더 복잡했다. 단순히 하나를 건너뛰는게 아니라 <code>[2, 1, 1, 2]</code>같이 0번째와 3번째가 아니라 0번째와 4번째의 조합이 가장 큰 수인 경우도 있어서 어떤 규칙을 찾아야했다.<br>leetcode에서 Dynamic Programming으로 분류되어 있길래 관련해서도 정리해봤다. 정리하면서 내가 쓴 방법이 메모이제이션임을 알게되었고 피보나치 수열을 예로 설명을 정리해보니 메모이제이션에 대해 이해가 되었다.</p><h3 id="블로그-수정"><a href="#블로그-수정" class="headerlink" title="블로그 수정"></a>블로그 수정</h3><ul><li>헤더, follow 버튼, 링크 컬러 수정</li><li>하단 탑 버튼 디자인 수정</li></ul><h3 id="블록체인-이해하기"><a href="#블록체인-이해하기" class="headerlink" title="블록체인 이해하기"></a>블록체인 이해하기</h3><p>블록체인을 기반으로 하겠다는 기술도 기업도 많다. 내가 블록체인에 대해 알고 있는 것은 조작이 어려워 안전하고 익명이지만 추적가능하고 거래 투명성을 보장한다는 것 정도이다. 블록체인의 기술 구현보다 이 기술의 실효성에 대해 이해가 잘 안되어서 오늘은 관련 글을 이것저것 찾아서 읽어봤다. </p><ul><li>블록체인으로 가능한 비즈니스 모델이 이해가 안되어서 참고할만한 포스팅<ul><li><a href="http://www.venturesquare.net/762522" target="_blank" rel="noopener">블록체인, 미디어의 미래를 말하다</a> </li><li><a href="http://www.venturesquare.net/762522" target="_blank" rel="noopener">블록체인 기술의 실체 그리고 미래</a></li><li><a href="https://brunch.co.kr/@inuitchained/2" target="_blank" rel="noopener">블록체인에서 가능한 재미난 비즈니스 모델</a></li></ul></li><li>그림으로 쉽게 이해하기 <ul><li><a href="https://steemkr.com/kr/@tintom/2fgvq8" target="_blank" rel="noopener">초딩도 이해하는 블록체인</a> : </li></ul></li><li>블록체인과 비트코인 좀 더 깊게 이해하기<ul><li><a href="https://blog.iwanhae.ga/introduction_of_bitcoin/" target="_blank" rel="noopener">원리부터 파악하는 비트코인</a> </li><li><a href="https://homoefficio.github.io/2017/11/19/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8-%ED%95%9C-%EB%B2%88%EC%97%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" target="_blank" rel="noopener">블록체인 한번에 이해하기</a></li><li><a href="http://abc1211.tistory.com/516?category=1003529" target="_blank" rel="noopener">길위의 개발자 - 자바스크립트로 블록체인 구현강좌</a></li></ul></li></ul><p>읽으면서도 계속 의문점이 들었던 거는 블록체인의 본질이라고 할 수 있는 탈중앙화의 의미 때문이었는데, 어떤 곳에서 플랫폼을 제공하고 그 플랫폼에서 이루어지는 거래의 수수료를 떼는 구조라면 또다른 중앙화랑 뭐가 다른가 싶어서였다. 그런데 이 부분은 나는 경제와 권력의 관점에서 진정한 탈중앙화의 의미에 너무 치중해서 생각하고 있어서 그런 것 같다. 데이터의 분산과 그에 따라 더 보안을 보장할 수 있는 것, 그리고 기여자들에게도 그 대가가 돌아가는 구조라는 점에서 효용성을 봐야할 것 같다. 그리고 또 하나는 속도인데… 이거는 EOS에 대해서도 좀 더 찾아봐야겠다.  </p><hr><p><em>drafts에 글 배포 잊지말자;;</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;House-Robber-알고리즘-문제풀이&quot;&gt;&lt;a href=&quot;#House-Robber-알고
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>House Robber</title>
    <link href="http://chiabi.github.io/2018/08/04/HouseRobber/"/>
    <id>http://chiabi.github.io/2018/08/04/HouseRobber/</id>
    <published>2018-08-04T02:01:41.000Z</published>
    <updated>2018-08-04T16:16:50.067Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p><p><strong>Example 1:</strong></p><ul><li>Input: [1,2,3,1]</li><li>Output: 4</li><li>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).<br>Total amount you can rob = 1 + 3 = 4.</li></ul><p><strong>Example 2:</strong></p><ul><li>Input: [2,7,9,3,1]</li><li>Output: 12</li><li>Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).<br>Total amount you can rob = 2 + 9 + 1 = 12.</li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><p>문제에 주어진 배열이 <code>[1, 2, 3]</code>이라고 했을 때 <code>1 + 3</code>과 <code>2</code>를 비교하게 되고, <code>[1, 2, 3, 4]</code>일 경우는 <code>1 + 3</code>과 <code></code>2 + 4<code>를 비교하게 되는데 그러면 홀수번과 다음 수를 비교할 때는</code>even = Math.max(1 + 3, 2)<code>이 되고, 짝수번의 요소와 다음 수를 비교하면</code>odd = Math.max(4, 2 + 4)<code>가 된다. 이런 규칙을 이용해서 푸는데, 만약 빈배열이거나 요소가 1개일 경우를 위해</code>even<code>과</code>odd`는 0을 기본값으로 할당해줬다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 60ms</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> even = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> odd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            even = <span class="built_in">Math</span>.max(even + nums[i], odd);           </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            odd = <span class="built_in">Math</span>.max(even, odd + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(even, odd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예전에 푼 프로그래머스 땅따먹기 문제랑 비슷한 것 같다. 이것도 너무 오래 걸렸다. 이런 유형의 알고리즘을 <strong>Dynamic Programming(DP)</strong>이라고 하는 것 같다.</p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><p>빈배열, 배열 요소가 하나일 때, 2개 일때는 따로 값을 반환하고, 3개 이상일 경우부터 <code>n: Max(n+s(n-2), s(n-1))</code>같은 규칙을 따른다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1: 1</span></span><br><span class="line">    <span class="comment">// 1,2: Max(1, 2)</span></span><br><span class="line">    <span class="comment">// 1,2,3: Max(3+s([1]), s([1,2]))</span></span><br><span class="line">    <span class="comment">// 1,2,3,4: Max(4+s([1,2]), s([1,2,3]))</span></span><br><span class="line">    <span class="comment">// n: Max(n+s(n-2), s(n-1))</span></span><br><span class="line">    <span class="keyword">if</span>(!nums.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(nums.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(nums.length === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> dp = [];</span><br><span class="line">    </span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// dp[2] = Math.max(nums[2] + dp[0], dp[1]);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">Math</span>.max(nums[i]+dp[i<span class="number">-2</span>], dp[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[dp.length - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="Dynamic-Programming-DP"><a href="#Dynamic-Programming-DP" class="headerlink" title="Dynamic Programming(DP)"></a>Dynamic Programming(DP)</h2><p>동적 프로그래밍</p><p>문제를 여러 개의 하위 문제로 나누어 푼 다음, 그것을 결합하여 최종적인 목적에 도달하는 방법으로 하위 문제의 값을 저장해두어(memozation) 그 하위 문제를 반복해서 풀어야 하는 경우 다시 계산하지 않고 재사용하는 식으로 계산 횟수를 줄일 수 있다.</p><p>모든 방법을 일일이 검토해 그 중 최적의 풀이법을 찾아내야 하기 때문에 최적의 방법(혹은 최단 경로)를 찾아내기 위한 시간이 걸리지만 그 결과는 가장 최적의 방법(최단 경로)라고 장담할 수 있다.</p><p>이를 이용한 알고리즘으로 최장 공통 부분 수열, 벨만-포드 알고리즘, 배낭문제 등이 있다.</p><p>피보나치 수열 문제의 경우 재귀적으로 다음과 같이 풀 수 있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233...</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibo = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">  <span class="keyword">return</span> fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 경우 <code>fibo(5)</code>를 구할 경우 다음과 같이 계산되는데, <code>fibo(n)</code>이 중복되어 계산되는 부분이 있어서, 전체적인 계산 속도를 떨어뜨린다.(이 알고리즘의 시간 복잡도는 지수함수가 된다.)</p><ul><li><code>fibo(5)</code></li><li><code>fibo(4) + fibo(3)</code></li><li><code>(fibo(3) + fibo(2)) + (fibo(2) + fibo(1))</code></li><li><code>((fibo(2) + fibo(1)) + (fibo(1) + fibo(0))) + ((fibo(1) + fibo(0)) + fibo(1))</code></li><li><code>(((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) + fib(1))</code></li></ul><p>이를 계산했던 값을 저장하는 메모이제이션을 이용해 동적 프로그래밍 방법으로 풀어본다면 다음과 같이 풀 수 있다. 이렇게 하면 중복되는 계산이 줄어든다.(시간 복잡도는 <math><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></math>이 된다.)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacci = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> memo = &#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> fibo = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span> || memo[n]) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[n]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            memo[n] = fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> memo[n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> fibo(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>참고</p><ul><li><a href="https://en.wikipedia.org/wiki/Dynamic_programming" target="_blank" rel="noopener">Wikipedia - Dynamic programming</a></li><li><a href="https://www.geeksforgeeks.org/dynamic-programming/#concepts" target="_blank" rel="noopener">GeeksforGeeks - Dynamic Programming</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/house-robber/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yo
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/03/TIL/"/>
    <id>http://chiabi.github.io/2018/08/03/TIL/</id>
    <published>2018-08-02T15:00:00.000Z</published>
    <updated>2018-08-04T16:57:24.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="Jest-공부하기"><a href="#Jest-공부하기" class="headerlink" title="Jest 공부하기"></a>Jest 공부하기</h3><p>자료구조를 만들어보면 테스트를 어떻게 할 지 고민을 했다. 처음에는 HTML 파일을 만들어서 script로 넣어서 콘솔에 넣을까 생각했다. ES6를 사용하니까 babel과 parcel 문서를 보고 환경을 만들다가 javascript-algorithm 처럼 테스트 환경을 만들어 보는 게 나을 것 같아서 Jest로 테스트 환경을 만들기로 했다. </p><p>Jest 문서의 <a href="https://jestjs.io/docs/en/getting-started.html" target="_blank" rel="noopener">Getting Started</a>를 참고해서 sum 함수를 테스트 해보려다가 다음과 같은 에러가 발생했다.</p><p><img src="/images/post_20180803_jest.jpg" alt="SecurityError: localStorage is not available for opaque origins"></p><p><a href="https://github.com/facebook/jest/issues/6766" target="_blank" rel="noopener">Jest 깃헙의 이슈</a>를 참고해서 <code>package.json</code>에 다음과 같이 <code>testURL</code>값을 <code>http://localhost/</code> 로 해서 jest 설정 부분을 추가했다. 해당 옵션은 ‘jsdom’환경의 URL을 설정한다고 한다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"jest"</span>: &#123;</span><br><span class="line">    <span class="attr">"verbose"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"testURL"</span>: <span class="string">"http://localhost/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 부분은 <code>jest.config.js</code>파일을 만들어서 다음과 같이 추가해도 된다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  verbose: <span class="literal">true</span>,</span><br><span class="line">  testURL: <span class="string">"http://localhost/"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>verbose</code>는 테스트 결과를 자세히 보고할 지 여부인데 기본값이 <code>false</code>라서 같이 추가해줬다.</p><ul><li><a href="https://jestjs.io/docs/en/configuration.html#verbose-boolean" target="_blank" rel="noopener">Configuring Jest</a></li></ul><h3 id="영어학원-등록"><a href="#영어학원-등록" class="headerlink" title="영어학원 등록"></a>영어학원 등록</h3><p>나는 외국을 안 나갈거니까 영어 따위는 필요없다고 호기롭게 말했던 학생때의 나를 때려주고 싶다. 사실 개발을 하게 될 줄도 몰랐지만… 영어와 뗄래야 뗄 수 없는 관계가 될 줄도 몰랐다.<br>개발 공부하면서 영어 공부의 필요성을 무지막지하게 느끼고 있다. 아직까지는 수능영어 공부할 때와 공무원 영어 공부하면서 얻은 독해 실력과 구글 번역기로 연명하고 있는데, 좀 더 빨리 읽고 싶고, 의미를 더 잘 이해하고 싶고 무엇보다 자막없는 컨퍼런스 영상을 이해하고 싶다. 그리고 커밋 메시지 비문없이 영어로 적고 싶다!  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;Jest-공부하기&quot;&gt;&lt;a href=&quot;#Jest-공부하기&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/02/TIL/"/>
    <id>http://chiabi.github.io/2018/08/02/TIL/</id>
    <published>2018-08-01T15:00:00.000Z</published>
    <updated>2018-08-04T16:12:55.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="자료구조-연결리스트-풀이"><a href="#자료구조-연결리스트-풀이" class="headerlink" title="자료구조 연결리스트 풀이"></a>자료구조 연결리스트 풀이</h3><ul><li><a href="https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/linked-list/README.md" target="_blank" rel="noopener">javascript-algorithms : Linked List</a></li><li><a href="https://leetcode.com/problems/design-linked-list/description/" target="_blank" rel="noopener">leetcode : Linked List</a></li></ul><p>연결리스트 설명부분만 먼저 보고, leetcode에 관련 문제가 있어서 먼저 구현해봤다. 연결리스트 설명이 블록체인에 대해 유튜브에서 간단히 설명했을때의 구조와 비슷한 것 같아서 흥미로웠다.<br>처음에 설명만 읽어서는 배열 안에 넣어야하나라고 생각했다. 그런데 배열 자체가 이미 push, pop을 할 수 있고, 인덱스로 해당 값을 구할 수 있다. 그래서 <a href="https://www.zerocho.com/category/Algorithm/post/58008a628475ed00152d6c4d" target="_blank" rel="noopener">ZeroCho</a>님의 블로그에서의 설명을 더 참고했다. 자바스크립트는 이미 배열로 연결 리스트가 구현되어 있어서, 객체로 만들어본다고 했다. 거기서 아이디어를 얻어서 leetcode 문제를 바탕으로 풀어봤다. 풀이는 <a href="https://github.com/chiabi/TIL/blob/master/Data-Structures/LinkedList/01.LinkedList.md" target="_blank" rel="noopener">github TIL 레포지토리</a>에 올렸는데 좀 더 정리되면 블로그에 올려야겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;자료구조-연결리스트-풀이&quot;&gt;&lt;a href=&quot;#자료구조-연결리스트-풀이&quot; class=&quot;he
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>keyboardRow</title>
    <link href="http://chiabi.github.io/2018/08/01/keyboardRow/"/>
    <id>http://chiabi.github.io/2018/08/01/keyboardRow/</id>
    <published>2018-08-01T06:56:42.000Z</published>
    <updated>2018-08-01T08:54:36.361Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/keyboard-row/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>Given a List of words, return the words that can be typed using letters of alphabet on only one row’s of American keyboard like the image below.</p><p><strong>Example 1:</strong></p><ul><li>Input: [“Hello”, “Alaska”, “Dad”, “Peace”]</li><li>Output: [“Alaska”, “Dad”]</li></ul><p><strong>Note:</strong></p><ul><li>You may use one character in the keyboard more than once.</li><li>You may assume the input string will only contain letters of alphabet.</li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><p><code>every</code>메소드를 써서 키보드 배열 중 모든 문자열이 속하는 배열이 있는 지 확인하는 부분에서 반복문을 쓸까 하다가 키보드 배열의 값은 변경될 일이 없을 것 같고 반복문 쓰면서 <code>every</code>의 반환값을 어딘가에 저장해두는 것이 더 좋은 방법 같지는 않아서 다음과 같이 풀었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 48ms</span></span><br><span class="line"><span class="keyword">const</span> keyboard = [</span><br><span class="line">    [<span class="string">'Q'</span>, <span class="string">'W'</span>, <span class="string">'E'</span>, <span class="string">'R'</span>, <span class="string">'T'</span>, <span class="string">'Y'</span>, <span class="string">'U'</span>, <span class="string">'I'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>],</span><br><span class="line">    [<span class="string">'A'</span>, <span class="string">'S'</span>, <span class="string">'D'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>],</span><br><span class="line">    [<span class="string">'Z'</span>, <span class="string">'X'</span>, <span class="string">'C'</span>, <span class="string">'V'</span>, <span class="string">'B'</span>, <span class="string">'N'</span>, <span class="string">'M'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> words.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> itemArr = item.toUpperCase().split(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">return</span> itemArr.every(<span class="function"><span class="params">item</span> =&gt;</span> keyboard[<span class="number">0</span>].includes(item)) || </span><br><span class="line">               itemArr.every(<span class="function"><span class="params">item</span> =&gt;</span> keyboard[<span class="number">1</span>].includes(item)) || </span><br><span class="line">               itemArr.every(<span class="function"><span class="params">item</span> =&gt;</span> keyboard[<span class="number">2</span>].includes(item));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>정규식이랑 <code>match()</code> 메소드, <code>some()</code>메소드를 이용해 다른 방법으로 풀어보았다. result에 한번 match의 반환값을 저장할 필요가 있었는데, join()으로 다시 문자열 결합할 때, match의 반환값이 배열이 아니라 <code>null</code>일때도 있기 때문이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 52ms</span></span><br><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> keyboards = [<span class="regexp">/[QWERTYUIOP]/ig</span>, /[ASDFGHJKL]/ig, /[ZXCVBNM]/ig];</span><br><span class="line">    <span class="keyword">return</span> words.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyboards.some(<span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = item.match(row);</span><br><span class="line">            <span class="keyword">return</span> result &amp;&amp; result.join(<span class="string">''</span>) === item</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><p>정규식을 굉장히 잘 사용한 풀이인 것 같다. <code>^</code>과 <code>$</code>을 이용해서 문자셋으로만 구성된 단어인지 여부를 RegExp <code>test()</code> 메소드를 통해서 bool값으로 반환하도록 했다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> words.filter(<span class="function">(<span class="params">w</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// remove word from array if it fails matching all three rows</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            !<span class="regexp">/^[qwertyuiop]*$/i</span>.test(w) &amp;&amp;</span><br><span class="line">            !<span class="regexp">/^[asdfghjkl]*$/i</span>.test(w) &amp;&amp;</span><br><span class="line">            !<span class="regexp">/^[zxcvbnm]*$/i</span>.test(w)</span><br><span class="line">        ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/keyboard-row/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gi
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>2018 장고걸스 서울 워크샵 후기</title>
    <link href="http://chiabi.github.io/2018/07/31/djangogirls/"/>
    <id>http://chiabi.github.io/2018/07/31/djangogirls/</id>
    <published>2018-07-31T04:03:45.000Z</published>
    <updated>2018-08-08T14:30:18.292Z</updated>
    
    <content type="html"><![CDATA[<p>기다리던 장고걸스 서울 워크샵 소식이 올라왔을 때 기쁘면서도 걱정이 되었다. 나는 파이썬과 장고는 생소하지만, 프로그래밍을 전혀 모르는 사람은 아니며 퍼블리셔로는 3년을 일했는데 개발 입문자를 위한 이 워크샵에 당첨될 수 있을까? 그래서 참가 신청 때 개발 경험이 있는지 등을 묻는 질문지를 보면서 이거 살짝 뻥을 쳐야하는 건가 생각했다. 차마 그럴 수 없어서 매우 솔직하게 썼는데 ‘장고걸스에서의 경험을 나누고 싶고 깃헙을 관리하고 있고 개발 블로그도 운영하고 있습니다’라는 나의 어필이 통한 것일까 당첨이 되었다. (야호!)<br>그리고 스쿨 동기들에게도 슬랙으로 워크샵 소식을 공유했더니 몇분이 신청해서 같이 참여하게 되었다.</p><p><img src="/images/post_django1.jpg" alt="장고걸스 행사장 앞에 있는 배너"></p><h2 id="장고걸스는-개발-입문자가-가장-편안한-마음으로-참여할-수-있는-개발-행사이다"><a href="#장고걸스는-개발-입문자가-가장-편안한-마음으로-참여할-수-있는-개발-행사이다" class="headerlink" title="장고걸스는 개발 입문자가 가장 편안한 마음으로 참여할 수 있는 개발 행사이다."></a>장고걸스는 개발 입문자가 가장 편안한 마음으로 참여할 수 있는 개발 행사이다.</h2><p>2018년의 나의 다짐은 ‘마크업만이 아니라 스크립트도 잘 다루고 최신 프론트엔드 트렌드도 따라갈 수 있는 개발자가 되자’였다. 그래서 3년을 다녔던 웹 에이전시를 나오기로 했고, 눈여겨보고 있던 패스트캠퍼스의 프론트엔드 스쿨 과정을 등록했다. 마침 시기도 적절한 게 퇴사일과 학원 개강일 사이에 2주 정도의 텀이 있었다. 학원에서는 각종 개발 커뮤니티와 밋업, 컨퍼런스에 참여하기를 권장했고 실제로 그렇게 열심히 살아야만 이 시대의 개발자(적어도 내가 이상으로 삼았던 개발자)로 살아갈 수 있는 것 같았다. 일단 페이스북 그룹이나 슬랙에 가입했다. 커뮤니티가 다양한 만큼 종종 다양한 행사 소식도 올라왔다. 간단히 맥주를 마시면서 개발에 관한 얘기를 나눠보자는 모임부터 해마다 정기적으로 열리는 것 같은 컨퍼런스 소식까지 다양했다. 그런데 그 많은 행사 중에 어느 것 하나 선뜻 참여할 용기가 나지 않았던 이유는 내가 꿔다놓은 보릿자루같이 굴 것 같아서였다. </p><blockquote><p>‘아는 사람 하나 없이 뻘쭘하게 있을 것 같아.’<br>‘대화하는데 내가 너무 몰라서 못 알아들으면 어떡하지?’<br>‘내가 너무 바보 같은 질문을 하면 어쩌지?’<br>‘입문자를 위한 모임은 없나?’</p></blockquote><p>이런 나의 걱정을 해소해주고 편안한 마음으로 참여할 수 있는 개발 행사가 장고걸스 워크샵이었다. </p><p>장고걸스 워크샵에서 가장 좋았던 점은 워크샵 기간 동안 지켜줘야 할 점에 대해 알려주는데, 그중 참석자는 어떠한 질문이라도 (너무 기초적이라 바보같이 느껴질 것 같은 질문이라도) 할 수 있다는 것이다. 요즘은 개발 커뮤니티에서도 어느 정도 자정하는 분위기인데, 가끔 너무 기초적인 것을 물어보는 사람에게 그 정도도 검색해서 찾아보지 않으냐며 날카롭게 구는 사람들이 몇몇 있다. 모르는 사람의 가장 큰 어려움은 이 모르는 걸 어떤 방법을 써야 해결할 수 있는지조차 모른다는 것이다. 아는 사람들이야 ‘“구글”에 “영어”로 이런 “키워드”로 검색하면 다 나와’, ‘“stack overflow”에 가면 다 있어’라고 말하지만, 그것조차 모를 수도 있는 법이다. 실제로 나는 웹 쪽으로 전향하기 전, 우체국에서 일할 당시만 해도 크롬은 안 썼다. 검색은 모두 네이버를 통해 이뤄졌고 어릴 때는 익스플로러가 업데이트되어서 UI가 조금이라도 바뀌면 화를 냈었다. 내가 그 사람 옆에서 성장 과정을 계속 지켜보지 않은 이상은 상대가 어느 정도 알 것이라는 판단을 섣부르게 해서는 안 된다.</p><p>아무튼, 이런 나의 여과 없이 나오는 질문에도 친절히 알려주신 <strong>이재열</strong> 코치님께 감사드린다. </p><h2 id="장고걸스에는-훌륭하고-친절한-코치님이-많이-계신다-모른다고-걱정하지-말자"><a href="#장고걸스에는-훌륭하고-친절한-코치님이-많이-계신다-모른다고-걱정하지-말자" class="headerlink" title="장고걸스에는 훌륭하고 친절한 코치님이 많이 계신다. 모른다고 걱정하지 말자"></a>장고걸스에는 훌륭하고 친절한 코치님이 많이 계신다. 모른다고 걱정하지 말자</h2><p>행사장에 딱 들어섰을 때 느낀 것은 ‘많다! 사람이 많다!!’였다. 파란 옷을 입은 워크샵 신청자도 많은데 흰옷을 입고 있는 코치님이나 검은 옷을 입고 있는 관계자분도 많았다. 조를 꾸려서 한 조에 신청자 3명 정도에 코치님이 1명 이상이 붙어서 진행하는데, 그렇게 구성된 조가 20팀 이상이었던 것 같다.<br>워크샵 첫날(7/20)은 7시에 시작되어 2시간 정도 파이썬을 설치하거나 에디터를 설치하는 것 같은 기본적인 개발환경을 세팅했다. 두 번째 날(7/21)에 본격적으로 장고걸스 튜토리얼을 따라 하면서 장고로 블로그를 만들었다. 우리 조는 나를 포함해 개발을 배워보셨거나 배우고 있는 분들이어서 어쩌다 보니 굉장히 빠르게 진행되어 심화 튜토리얼까지 진행해버렸지만, 중간중간 막히는 부분도 있었다. 나의 경우는 내가 찾을 수 없는 오류가 발생하는 경우거나 git에서 실수해버린 경우였는데 코치님이 팀 테이블 주위를 열심히 뛰어다니면서 문제가 발생할 때마다 같이 봐주시고 해결해주셨다. 그리고 블로그를 만들면서 개인적으로 파이썬 문법과 장고에 대해 어느 부분까지가 장고의 기능이고, 파이썬의 문법인지 궁금한 점을 여쭤봤는데 매우 친절하고 쉽게 알려주셨다.<br>특히 첫날에 MVC에 대해 설명해주셨는데, 사실 이전에는 MVC, MVVM 등의 아키텍처 패턴에 대한 이해가 많이 부족했다. 리액트는 뷰만 담당하는 라이브러리이고 앵귤러는 프레임워크다라는 설명을 들었을 때도 앵귤러에 대한 경험과 이해가 없다 보니 어떤 점이 다른 것인지 이해하기는 힘들었다. 관련해서 글을 찾아봐도 이해를 잘 못 했는데, 이재열 코치님의 설명을 듣고 장고걸스 튜토리얼을 따라 해 보면서 MVC 패턴이나 프레임워크란 것이 어떤 것인지 이해하게 되었다.</p><p><img src="/images/post_django2.jpg" alt="나의 첫 파이썬/장고 프로젝트"></p><p>장고걸스 워크샵의 좋은 점은 내가 혼자서 한다면 몇 날 며칠이 걸릴지도 모르는 문제를 코치의 도움을 받아 빠르게 해결할 수 있다는 것이다. 혼자 공부하는 것에도 장점은 있다. 해결 방법을 찾는 과정 또한 공부일 것이고, 문제 해결 능력을 키울 수 있다. 해결했다는 성취감 역시 얻을 수 있다. 단점은 매우 많은 삽질을 해야 하고 엄청나게 시간을 낭비할지 모른다는 것이다. 이전에 장고걸스 튜토리얼을 따라 해보려다 포기한 이유는 튜토리얼 자체가 ‘이 정도는 아시죠?’ 같은 느낌이 없지 않아 있는 데다가 그 이 정도를 맞추기 위해 어디부터 공부해야 할 지 감이 안 잡히고, 오류 상황이 발생했을 때 그걸 풀 능력이 내게 부족해서 gulp와 Sass를 처음 익힐 때처럼 매우 고통의 시간이 될 것 같은 예감이 들어서였다. 그래서 스쿨과정이 끝날 때쯤에는 어느 정도 스크립트에 익숙해져 있을 테니 그때 다시 도전하자는 마음으로 일단 접어두었었다.<br>단순히 따라하는 것뿐이더라도 개발의 한 사이클을 경험해보고 결과물을 만들게 되면 앞으로의 공부에 많은 도움이 된다. 그런 점에서 장고걸스는 개발 입문자에게 (혹은 나처럼 파이썬/장고 입문자에게) 굉장히 좋은 기회인 것 같다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p><del>오늘도 작문 실력을 늘려야겠다는 깊은 반성을 하며…</del><br>장고걸스 워크샵을 신청한 계기는 ‘잘 만들어진 튜토리얼을 제공한다해도 누구의 도움도 없이 생소한 언어와 생소한 기술을 사용해 보는 것은 굉장히 오랜 시간이 걸리니까 워크샵을 통해 코치님들의 도움을 받아 한 사이클을 빠르게 경험해보자’였다. 실제로 코치님의 도움으로 튜토리얼을 따라하는데 큰 어려움은 없었다. 장고의 일부를 경험한 것이지만 웹 프레임워크라는 것이 어떤 것인지 경험해 볼 수 있어서 그것만으로도 굉장히 유익했다.<br>그런데 그런 목표 성취 이상의 경험이었다. 세마나 형식의 컨퍼런스 외에 이런 소통을 통한 커뮤니티 행사에 처음 참여해 본 것이었고 나 스스로 이전과 다르게 외향적으로도 적극적인 사람이 되었구나를 느꼈다. 그리고 앞으로 개발 커뮤니티의 행사에 참여할 용기를 얻었다. 다음에는 장고걸스에 코치로 참여하는 것을 목표로 해야겠다.</p><p><img src="/images/post_django3.jpg" alt="장고걸스 굿즈가 탐이 난다면 다음 워크샵 신청..."></p><hr><ul><li><a href="https://djangogirls.org/seoul/" target="_blank" rel="noopener">django girls seoul</a></li><li><a href="https://www.facebook.com/djangogirlsseoul/" target="_blank" rel="noopener">django girls seoul : 페이스북 커뮤니티</a></li><li><a href="https://tutorial.djangogirls.org/ko/" target="_blank" rel="noopener">장고걸스 튜토리얼</a></li><li><a href="https://tutorial-extensions.djangogirls.org/ko/" target="_blank" rel="noopener">장고걸스 튜토리얼 : 심화</a></li><li><a href="http://chiabi.pythonanywhere.com/" target="_blank" rel="noopener">나의 장고 블로그 결과물</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;기다리던 장고걸스 서울 워크샵 소식이 올라왔을 때 기쁘면서도 걱정이 되었다. 나는 파이썬과 장고는 생소하지만, 프로그래밍을 전혀 모르는 사람은 아니며 퍼블리셔로는 3년을 일했는데 개발 입문자를 위한 이 워크샵에 당첨될 수 있을까? 그래서 참가 신
      
    
    </summary>
    
      <category term="log" scheme="http://chiabi.github.io/categories/log/"/>
    
    
      <category term="Django Girls" scheme="http://chiabi.github.io/tags/Django-Girls/"/>
    
      <category term="장고걸스" scheme="http://chiabi.github.io/tags/%EC%9E%A5%EA%B3%A0%EA%B1%B8%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/07/28/TIL/"/>
    <id>http://chiabi.github.io/2018/07/28/TIL/</id>
    <published>2018-07-28T08:15:30.000Z</published>
    <updated>2018-07-31T04:02:46.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="엔트리"><a href="#엔트리" class="headerlink" title="엔트리"></a>엔트리</h3><p>감기와 올해 4학년이 된 사촌동생이 함께 찾아왔다.(신난다) 자는 동안은 감기로 죽어있고, 깨어있는 동안은 열정적인 여동생과 놀아줘야했다. 다음주 내내 휴가를 낸 언니는 그것만 바라보며 약간 득도한 모양이다. ‘치킨차차’라고 기억력 향상에 매우 유익한 보드게임이 있는데, 아무도 나와 놀아주지 않아서 구석에서 썩고 있던 것을 사촌동생이 잘도 찾아내서 끝나지 않을 것만같은 꼬리잡기 릴레이를 했다.</p><p>동생의 흥미를 다른 곳으로 돌리기 위해 게임 만드는 거 좋아하냐는 질문으로 약을 팔면서 컴퓨터 앞에 앉혔다. 다행히 게임 만드는 게 재미있을 것 같다며 흥미로워 했다. 엔트리는 네이버에서 홍보할 당시에 소프트웨어적 사고력을 키워준대서 해봤었는데, 오랜만에 들어오니 많이 체계적으로 바껴있고 작품 공유하기에는 어린애들이 만든게 맞나 싶을 정도로 꽤 잘 만든 것도 있었다. 학습하기를 따라하도록 하고서 지켜봤는데, 학습용이라는 목적에 맞게 단계적으로 진행하도록 설명 팁이 계속 제공되었다.<br>학습하기 외에 작품만들기를 이용하면, 학습하기에서 학습했던 것을 토대로 자신만의 창의적인 작품을 만들어 볼 수 있는데, 이걸 봤다가 갑자기 모르는 UI가 급 보여지니까 어렵게 느껴졌는지 사촌동생의 흥미 역시 급 하락해버렸다… </p><p>액괴 영상에 밀려서 더이상 진행하지는 못했지만, 학습하기에서 반복문 안에 로직을 넣는 것이 나왔었는데, 이런 사고력을 어릴때부터 키운다면 나중에 다른 언어를 공부한다해도 크게 어려움이 없겠구나 생각되었다. 요즘 초등학생들은 이런 엔트리나 스크래치를 이용해서 코딩교육을 한다고 들었는데, 나중에라도 동생이 이쪽으로 흥미가 생기거나 필요하게 되면 나한테 도움을 구해줬으면 좋겠다. 그리고 꼭 개발자가 되고싶지 않더라도 경험이란 것은 앞으로의 선택에 중요한 밑거름이 되니까 도움이 되었으면 좋겠다.  </p><p>갑자기 고등학생때 RPG 쯔꾸루로 게임을 만들어본다고 알지도 못하는 스크립트를 Ctrl + C / V 하면서 혼자 삽질했던 기억이…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;엔트리&quot;&gt;&lt;a href=&quot;#엔트리&quot; class=&quot;headerlink&quot; title=&quot;엔트리
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/07/27/TIL/"/>
    <id>http://chiabi.github.io/2018/07/27/TIL/</id>
    <published>2018-07-27T14:13:07.000Z</published>
    <updated>2018-07-28T09:02:52.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="퍼블리싱-외주-완료"><a href="#퍼블리싱-외주-완료" class="headerlink" title="퍼블리싱 외주 완료"></a>퍼블리싱 외주 완료</h3><p>오늘은 업체에 찾아가서 마지막 마무리 작업을 했다. 내 마크업에 기존 개발중인 기능을 적용해야 하는데, UI가 수정되기도 해서 추가 작업을 했다. 수정요청이 좀 많아서 6시까지 완료할 수 있을까 조금 걱정했는데, 업체 개발자와 협의해서 먼저 개발해야하는 기능부터 수정해서 넘겨주는 식으로 작업을 진행해서 다행히 시간내에 완료할 수 있었다. 디자인도 외주를 맡긴 상황이라 기획이나 디자인이 빠르게 넘어오지 않은 상태에서 말로만 이 부분이 변경이 있다라는 식으로 전달 받을때는 당황스러웠는데, 손그림으로라도 그려서 주셨으면 좋겠다고 하니 AdobeXD로 빠르게 수정된 디자인을 받았다. 디자인하는 것을 옆에서 구경했는데, AdobeXD에서 아이콘을 리스트에 동일하게 추가하는데 스크롤만 내리니 아이콘이 간격대로 생성이 되었다. 포토샵은 어느정도 기본만 할 수 있는 수준이고, 이미지 내보내는 부분 정도만 액션을 추가한다든지 하는 식으로 활용하고 있어서 포토샵에도 그런 기능이 있는지는 모르겠지만 굉장히 신기했다.(업무 효율 올라가는 소리가…)<br>굉장히 신기해서 찾아봤는데, 반복 그리드라는 작업이었다.<br>오늘 업체 개발자와 커뮤니티를 하면서 느낀게 상대의 말이 이해가 안되면 많이 물어봐야하고, 상대방이 알아듣기 쉽도록 설명해야 된다는 거였다. 아무리 개발 용어라도,  어떤 의도에서 썼는지는 본인만 알 수 있었다. 그리고 나와 대화하는 사람이 이정도는 알고있을 것이다라는 예측은 하면 안된다는 것.<br>그리고 동적으로 리스트를 생성하기를 원하셨고, 그부분에서 CSS가 안 먹기 때문에 CSS를 인라인으로 넣겠다고 하셔서 이부분에 대한 커뮤니케이션이 좀 어려웠는데, 결론은 내가 개발자님이 말씀하시는 데이터 형태에 맞춰 리스트가 동적으로 생성되는 코드를 짜보기로 했고, 마크업 개발 외주여서 이것까지 하게 될 줄은 몰랐지만 재미있는 작업이었다.<br>개발자님이 말씀하신 배열이 어떤 구조인지 여쭤보고, for문 안에서 리스트 아이템에 데이터를 넣고 생성되도록 했는데, for문을 두번 돌리기 전에 filter 메소드를 통해 두번째 배열의 아이템이 첫번째 배열의 정보를 가지고 있는지를 먼저 체크하도록 해서 다음 for문을 돌릴때 대상에 두번째 배열에서 필터링 된 배열 정보를 넘겨줬다. 그래서 for문을 좀 더 덜 돌 수 있게 되었다.</p><!-- > + 개발자님: 동적으로 이 리스틑를 생성하는데 제가 해보니 CSS가 안 먹더라구요. > + 나: 동적으로 생성하는데 CSS가 안먹는다구요?> + 개발자님: 제가 배열을 2개를 만들어서 이중 for문을 써서 요소를 생성하는데, 나중에 값이 추가되면 요소가 추가되는 게 아니라 다시 동적으로 그리게 하는데 CSS가 안먹더라구요. 이부분을 만약에 개발자님이 해주실 수 없으면 CSS를 인라인으로 넣으려고 하는데, 그럼 제가 해당하는 CSS를 일일이 찾아야 하니까 그 CSS부분만 저에게 알려주시면 인라인으로 넣으려합니다.> + 나: 어... 동적으로 생성하는데 이벤트가 아니라 CSS가 안 먹는다는 부분이 저는 잘 이해가 안되는데요... 그리고 인라인으로 넣으면 마크업이 굉장히 지저분해지고 길어질 것 같아요. 배열을 중첩으로 쓰신다는 건가요?> + 개발자님: 아 여기 배열이 model이랑 support로 해서 for문을 이중으로 썼거든요. (소스코드 보여주심)> + 나: 아..음... 그러면 일단 이부분을 제가 스크립트로 짜보고 말씀드릴게요. -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;퍼블리싱-외주-완료&quot;&gt;&lt;a href=&quot;#퍼블리싱-외주-완료&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/07/26/TIL/"/>
    <id>http://chiabi.github.io/2018/07/26/TIL/</id>
    <published>2018-07-26T14:58:25.000Z</published>
    <updated>2018-07-26T16:04:47.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="Sass-스터디"><a href="#Sass-스터디" class="headerlink" title="Sass 스터디"></a>Sass 스터디</h3><p>Sass는 계속 쓰고 있었지만, 스터디를 준비하면서 다시 공부했다. Dart Sass가 나온 배경이라든지 Sass blog에 올라온 글도 읽어보고 처음부터 시작한다 생각하고  Sass를 사용하기 위한 환경 설정도 다시 해보니, 다른 방법이 있거나 제대로 모르고 있던 부분도 알 수 있었다.<br>특히 설치에서 애를 먹었는데, 내가 현재 사용하고 있는 node 버전은 8이었고, Sass는 아직 node 8버전에서 공식적으로 지원되는 것이 아니어서 발생한 문제였다. 그래서 nvm을 통해 설치된 node 버전 중 6.10.0으로 변경하니 발생했던 오류가 사라졌다.<br>가볍게 쓰려고 사용하고 있던 VSCode 익스텐션인 Live Sass Compiler는 생각보다 훨씬 좋았다. Autoprefix를 같이 쓰려고 gulp-sass 사용할 때 설치하고 설정해주고 했었는데, Live Sass Compiler는 이를 지원한다.<br>다른 사람에게 설명해주기 위한 준비과정 자체가 많은 도움이 되는 것 같다. 내가 무엇을 알고, 무엇을 모르고 있는지가 좀 더 명확해진다. 오늘 Sass 문법까지 다루고 싶었는데, 환경 설정하면서 package.json부터 설명을 해야 되어서 생각보다 시간이 훌쩍 지나가버렸다. 대충 Sass를 사용하면 어떤 점이 좋을지 왜 Sass를 사용하는지 위주로 대화를 했고, 문법 관련해서는 생소한 <code>&amp;</code>같은 부모참조 선택자나 Sass와 SCSS의 차이, BEM 방법론을 사용할 때 Sass 활용 방법 (중첩이나 부모참조 선택자)위주로 설명했다.<br>함수나 리스트, 맵과 반복문을 사용해 어떤 것을 할 수 있을지 등도 보여주고 싶었는데, 시간이 부족해서 아쉬웠다.<br>Sass는 내가 스크립트 언어를 익히는데 많은 도움을 준 언어라 굉장히 애착이 간다. 그리고 그걸 오늘 다시 공부해보면서 느꼈다. CSS로는 할 수 없는 정말 멋진 기능이 많은데 오늘 다 못해서 아쉽고, 나중에 또 시간을 내야겠다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;Sass-스터디&quot;&gt;&lt;a href=&quot;#Sass-스터디&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/07/25/TIL/"/>
    <id>http://chiabi.github.io/2018/07/25/TIL/</id>
    <published>2018-07-25T14:59:38.000Z</published>
    <updated>2018-07-25T16:42:26.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="TIL-레포지토리-정리"><a href="#TIL-레포지토리-정리" class="headerlink" title="TIL 레포지토리 정리"></a>TIL 레포지토리 정리</h3><p>깃헙의 TIL 레포지토리의 구조를 좀 수정했다. 프론트엔드 개발 스쿨과정에서 WEEK_N 디렉토리로 정리했던 파일들은 [FDS]fds-9로 옮겼고, 앞으로 카테고리 별로 공부한 내용을 관리하려 한다.<br>깃헙의 project를 이용해서 할 일을 관리해보려고 하는데, 풀리퀘 말고 이슈와 커밋을 연결해서 깃헙 이슈에 기록을 남기는 방법을 찾아봤는데, 좀 더 찾아봐야겠지만 커밋으로 이슈를 닫는 기능은 있었다.</p><ul><li><a href="https://help.github.com/articles/closing-issues-using-keywords/" target="_blank" rel="noopener">Closing issues using keywords</a></li></ul><h3 id="리덕스-공부"><a href="#리덕스-공부" class="headerlink" title="리덕스 공부"></a>리덕스 공부</h3><p>리덕스 문서 원문과 번역본을 같이 보면서 공부하고 있다. 일단 기초 부분을 한번 읽어보면서 따라 치는 식으로 하고 있는데,<br>에러가 발생해서 확인해봐야 한다. </p><hr><p>국비 과정때 같이 공부했던 동기와 스터디를 하기로 했는데, 내일 Sass를 주제로 진행할 예정이다. 최근에 외주하면서도 사용하기는 했는데, 전 회사에서 했던 것처럼 내가 발표하는 형식으로 진행해야 해서 다시 한번 정리해야겠다. 원래는 낮에 리덕스 공부하고 나서 준비하려고 했는데, 생각보다 리덕스 개념이 잘 이해가 안가서 시간을 많이 잡아먹었다. 비록 에러를 아직 해결하지 못했지만, 예제를 통해 기초파트의 한 사이클을 도니까 좀 이해가 되는 것 같다. 내일은 이 에러를 해결하고 심화부분을 보면서 파이널 프로젝트로 했던 SEEMVA를 수정해봐야겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;TIL-레포지토리-정리&quot;&gt;&lt;a href=&quot;#TIL-레포지토리-정리&quot; class=&quot;head
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Self Dividing Numbers</title>
    <link href="http://chiabi.github.io/2018/07/25/SelfDividingNumbers/"/>
    <id>http://chiabi.github.io/2018/07/25/SelfDividingNumbers/</id>
    <published>2018-07-25T14:57:22.000Z</published>
    <updated>2018-07-25T17:17:09.442Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/self-dividing-numbers/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>A self-dividing number is a number that is divisible by every digit it contains.<br>For example, 128 is a self-dividing number because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.<br>Also, a self-dividing number is not allowed to contain the digit zero.<br>Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.</p><p><strong>Example 1:</strong></p><ul><li>Input: </li><li>left = 1, right = 22</li><li>Output: <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]</code><br><strong>Note:</strong></li><li>The boundaries of each input argument are <code>1 &lt;= left &lt;= right &lt;= 10000</code>.</li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><p>숫자를 문자열로 만들어 쪼개서 나누어떨어지면 push로 배열에 추가하는 방법<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 64ms</span></span><br><span class="line"><span class="keyword">var</span> selfDividingNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i.toString().split(<span class="string">''</span>).every(<span class="function"><span class="params">item</span> =&gt;</span> i % <span class="built_in">parseInt</span>(item) === <span class="number">0</span>)) result.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>그런데 0이 포함되면 self-dividing number가 아니므로 이렇게 추가해줘도 될 것 같다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 68ms</span></span><br><span class="line"><span class="keyword">var</span> selfDividingNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">10</span> !== <span class="number">0</span> &amp;&amp; i.toString().split(<span class="string">''</span>).every(<span class="function"><span class="params">item</span> =&gt;</span> i % <span class="built_in">parseInt</span>(item) === <span class="number">0</span>)) result.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selfDividingNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> numbers = i.toString().split(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">let</span> divide = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> n <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % n !== <span class="number">0</span>) &#123;</span><br><span class="line">                divide = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(divide) result.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/self-dividing-numbers/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquo
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/07/24/TIL/"/>
    <id>http://chiabi.github.io/2018/07/24/TIL/</id>
    <published>2018-07-24T11:59:40.000Z</published>
    <updated>2018-07-24T16:21:38.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="퍼블리싱-외주-완료"><a href="#퍼블리싱-외주-완료" class="headerlink" title="퍼블리싱 외주 완료"></a>퍼블리싱 외주 완료</h3><p>작업 기한은 27일까지이긴 하지만 웹에이전시에서 일할 당시를 생각하면, 개발로 넘어가면 수많은 변수가 생기기 때문에 개발을 붙일 수 있는 시간에 여유를 드려야 할 것 같아서 일찍 완료해 넘겼다. 학원으로 이동 중에 연락이 와서, 이미지가 보이지 않고 이벤트들이 하나도 발생하지 않는다고 확인 요청이 왔다. 별다른 개발 환경세팅이 필요한지 여쭤보시기에 혹시 서버에 올려서 테스트하거나 아니면 라이브 서버를 통해 확인하고 계시냐고 여쭤봤는데, 개발자분이 그렇다고 하시기는 했는데, 그냥 로컬에서 파일을 열어 확인해보셨던 것 같다. 그래서 절대경로로 된 path를 읽지 못하는 거였다. 나는 작업할 때 vscode의 라이브 서버 확장프로그램을 사용해서 이상이 없었지만 상대경로로 다시 수정해서 넘겨드렸다.</p><h3 id="모의-면접"><a href="#모의-면접" class="headerlink" title="모의 면접"></a>모의 면접</h3><p>학원에서 진행하는 마지막 모의 면접을 봤다. 기술 면접은 아니고 자기소개서를 바탕으로 하는 인성 면접이었는데, 1차로 봤던 모의 면접에 비해 많이 나아진 것 같다. 프론트엔드 개발에 관련된 프로젝트를 해보고 기업조사도 하면서 좀 더 내가 어떤 방향으로 나아가야할 지 목표가 확실해지고, 나 자신에 대해 더 알게 되어서 말할 거리가 많이 생긴 것 같다.</p><h3 id="리덕스-복습"><a href="#리덕스-복습" class="headerlink" title="리덕스 복습"></a>리덕스 복습</h3><p>외주로 조금 소홀해진 복습에 다시 열중해야겠다. 일단 가장 하고 싶었던 context API로 만든 파이널 프로젝트를 리덕스를 이용해 수정하는 것을 하기 위해 리덕스를 복습하고 있다. 튜토리얼을 따라서 하는데, 특강때 했던 내용이 하나씩 다시 생각나고 있다. </p><h3 id="Git-github-특강"><a href="#Git-github-특강" class="headerlink" title="Git, github 특강"></a>Git, github 특강</h3><p>fork한 저장소의 최신 변경사항을 받아오는 방법에 대한 내용이 주였고, 관련해서 실습도 진행되었다.</p><ul><li>git stash에 대해 좀 더 찾아보자. </li></ul><hr><p>날이 너무 더워서 많이 이동하는 날은 기력이 쭉 빠진다. 얼른 시원해졌으면 좋겠다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;퍼블리싱-외주-완료&quot;&gt;&lt;a href=&quot;#퍼블리싱-외주-완료&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>MaxIncreasetoKeepCitySkyline</title>
    <link href="http://chiabi.github.io/2018/07/24/MaxIncreasetoKeepCitySkyline/"/>
    <id>http://chiabi.github.io/2018/07/24/MaxIncreasetoKeepCitySkyline/</id>
    <published>2018-07-24T11:55:37.000Z</published>
    <updated>2018-07-25T16:42:48.719Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/max-increase-to-keep-city-skyline/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>In a 2 dimensional array grid, each value grid[i][j] represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. </p><p>At the end, the “skyline” when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city’s skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.</p><p>What is the maximum total sum that the height of the buildings can be increased?</p><p><strong>Example:</strong></p><ul><li>Input: <code>grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]</code></li><li>Output: 35<br><strong>Explanation:</strong> </li><li>The grid is:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ [3, 0, 8, 4], </span><br><span class="line"> [2, 4, 5, 7],</span><br><span class="line"> [9, 2, 6, 3],</span><br><span class="line"> [0, 3, 1, 0] ]</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>The skyline viewed from top or bottom is: [9, 4, 8, 7]</li><li>The skyline viewed from left or right is: [8, 7, 9, 3]</li></ul><p>The grid after increasing the height of buildings without affecting skylines is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gridNew = [ [8, 4, 8, 7],</span><br><span class="line">          [7, 4, 7, 7],</span><br><span class="line">          [9, 4, 8, 7],</span><br><span class="line">          [3, 3, 3, 3] ]</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>Notes:</strong></p><ul><li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>.</li><li>All heights <code>grid[i][j]</code> are in the range <code>[0, 100]</code>.</li><li>All buildings in <code>grid[i][j]</code> occupy the entire grid cell: that is, they are a <code>1 x 1 x grid[i][j]</code> rectangular prism.</li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><p>배열을 두번이나 탐색해야해서 좋은 방법이 아닌 것 같아서 좀 괴로운데, 가장 단순하게 생각할 수 있는 방법인 것 같다. 먼저, 위/아래의 스카이라인과 좌/우의 스카이라인을 구해두고, reduce메소드를 사용해 다시 배열을 탐색하면서, 해당 좌표의 스카이라인 중 작은 값을 구하고 원래의 값을 뺀 값을 누적으로 더해주는 방법으로 풀어봤다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 64 ms</span></span><br><span class="line"><span class="keyword">var</span> maxIncreaseKeepingSkyline = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> upDown = [];</span><br><span class="line">    <span class="keyword">const</span> side = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = grid.length; i &lt; l; i++) &#123;</span><br><span class="line">        side.push(<span class="built_in">Math</span>.max(...grid[i]));</span><br><span class="line">        <span class="keyword">const</span> arr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; l; j++) &#123;</span><br><span class="line">            arr.push(grid[j][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        upDown.push(<span class="built_in">Math</span>.max(...arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> grid.reduce(<span class="function">(<span class="params">acc, row, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> acc + row.reduce(<span class="function">(<span class="params">a, col, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a + (<span class="built_in">Math</span>.min(side[index], upDown[i]) - col); </span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>코드 길이는 줄였는데, 더 느려졌다. 6번째 줄에 <code>const cMax = Math.max(...arr.map((item) =&gt; item[i]));</code> 이부분이 원인인 것 같다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 96ms</span></span><br><span class="line"><span class="keyword">var</span> maxIncreaseKeepingSkyline = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> grid.reduce(<span class="function">(<span class="params">acc, row, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> rMax = <span class="built_in">Math</span>.max(...row);</span><br><span class="line">        <span class="keyword">return</span> acc + row.reduce(<span class="function">(<span class="params">a, col, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> cMax = <span class="built_in">Math</span>.max(...arr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> item[i]));</span><br><span class="line">            <span class="keyword">return</span> a + (<span class="built_in">Math</span>.min(rMax, cMax) - col)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/max-increase-to-keep-city-skyline/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/07/23/TIL/"/>
    <id>http://chiabi.github.io/2018/07/23/TIL/</id>
    <published>2018-07-23T14:10:16.000Z</published>
    <updated>2018-07-24T11:55:00.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="퍼블리싱-외주-80-진행"><a href="#퍼블리싱-외주-80-진행" class="headerlink" title="퍼블리싱 외주(80% 진행)"></a>퍼블리싱 외주(80% 진행)</h3><p>디자인 시안의 폰트 사이즈가 대부분 10px이하다. 어떤 버튼은 폰트 사이즈가 7px이다. 아이패드에서는 그나마 좀 잘 보이는데, 작업하는 내가 괴로울 정도로 노트북에서는 잘 안보인다.(내가 눈이 나쁜건가…)<br>쇼핑몰 퍼블리싱할 때 받았던 디자인에서는 대부분 기본적인 폰트 사이즈는 12px 혹은 14px이고 제일 작은 폰트 사이즈가 10px이었다. 그리고 그렇게 해야 가독성이 좋았는데, 아이패드나 브라우저에서 화면을 확대하는 방법이 있기 때문에 그렇게 하는 걸까.</p><ul><li><a href="http://koreawebdesign.com/typography-for-webdesign/" target="_blank" rel="noopener">웹디자인을 위한 타이포그라피 10가지 팁</a></li><li><a href="http://webactually.com/2015/10/%EB%B0%98%EC%9D%91%ED%98%95-%EC%9B%B9-%EB%94%94%EC%9E%90%EC%9D%B8%EC%97%90%EC%84%9C-%EA%B8%80%EC%A4%84%EC%9D%98-%EA%B8%B8%EC%9D%B4%EC%99%80-%EA%B8%80%EC%9E%90-%ED%81%AC%EA%B8%B0-%EA%B7%A0%ED%98%95/" target="_blank" rel="noopener">반응형 웹 디자인에서 글줄의 길이와 글자 크기 균형 잡기</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust/" target="_blank" rel="noopener">MDN - font-size-adjust</a></li></ul><p>디자인에 range 슬라이더가 있어서 찾아봤는데 rangeslider.js가 제일 복잡한 기능없이 간단하게 사용하기 좋았다.</p><ul><li><a href="http://rangeslider.js.org/" target="_blank" rel="noopener">rangeslider.js</a></li></ul><p>디자인 시안을 어떤 파일로 전달해주면 되냐고해서 포토샵이나 일러면 좋을 것 같다고 했더니 보낸 파일이 전혀 레이어가 분할되어 있지 않았다. sketch로 작업했구나 싶어서 차라리 sketch 파일로 보내달라고 했는데, 재플린으로 공유해달랄 걸 그랬나보다. 하지만 덕분에 윈도우에서 sketch파일을 보는 방법을 찾아보다가 <code>.sketch</code> 파일을 지원하는 Windows app인 <strong>lunacy</strong>라는 걸 찾았다.(무료다!!)<br>그리고 시안 수정은 또 클라이언트 업체의 상주 디자이너가 하는데(시안 자체는 외주), sketch는 안쓰는지 Adobe XD 파일을 보내줬다.<br>포토샵으로만 시안 받아서 퍼블리싱 해봤는데 덕분에 이런 저런 툴을 다양하게 사용해보고 있다.</p><ul><li><a href="https://icons8.com/lunacy" target="_blank" rel="noopener">lunacy</a></li><li><a href="https://www.adobe.com/kr/products/xd.html" target="_blank" rel="noopener">Adobe XD</a></li></ul><h3 id="알고리즘-문제-풀이"><a href="#알고리즘-문제-풀이" class="headerlink" title="알고리즘 문제 풀이"></a>알고리즘 문제 풀이</h3><p>문제가 조금 간단하고 장고걸스 튜토리얼에서 봤던 정도로도 풀 수 있을 것 같아서 파이썬으로도 풀어봤다.<br>range나 len 함수에 대해 찾다가 파이썬 문법을 공부하는데 도움이 될 것 같은 사이트를 찾았다.</p><ul><li><a href="https://wikidocs.net/book/1" target="_blank" rel="noopener">점프 투 파이썬</a></li></ul><hr><p>내일까지면 퍼블리싱 외주 작업은 끝날 것 같다. 그러면 다시 파이널 프로젝트에 집중해서 Context API를 썼던 부분을 리덕스로 변경하는 작업에 착수해야겠다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;퍼블리싱-외주-80-진행&quot;&gt;&lt;a href=&quot;#퍼블리싱-외주-80-진행&quot; class=&quot;he
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>peakIndexInMountainArray</title>
    <link href="http://chiabi.github.io/2018/07/23/peakIndexInMountainArray/"/>
    <id>http://chiabi.github.io/2018/07/23/peakIndexInMountainArray/</id>
    <published>2018-07-23T13:10:22.000Z</published>
    <updated>2018-08-06T03:01:39.028Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/peak-index-in-a-mountain-array/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>Let’s call an array A a mountain if the following properties hold:</p><p><code>A.length &gt;= 3</code><br>There exists some <code>0 &lt; i &lt; A.length - 1 such that A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code><br>Given an array that is definitely a mountain, return any <code>i</code> such that <code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code>.</p><p><strong>Example 1:</strong></p><ul><li>Input: [0,1,0]</li><li>Output: 1</li></ul><p><strong>Example 2:</strong></p><ul><li>Input: [0,2,1,0]</li><li>Output: 1</li></ul><p><strong>Note:</strong></p><ul><li>3 &lt;= A.length &lt;= 10000</li><li>0 &lt;= A[i] &lt;= 10^6</li><li>A is a mountain, as defined above.</li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>배열에서 조건에 일치하는 첫번째 인덱스를 찾아주는 <code>findIndex()</code> 메소드를 사용했다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 56 ms</span></span><br><span class="line"><span class="keyword">var</span> peakIndexInMountainArray = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.findIndex(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> item &gt; arr[index + <span class="number">1</span>];    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>A 배열은 산이라고 했으니까 Math.max의 인덱스를 구하는 방법을 사용했다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 56ms</span></span><br><span class="line"><span class="keyword">var</span> peakIndexInMountainArray = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> max = <span class="built_in">Math</span>.max(...A);</span><br><span class="line">    <span class="keyword">return</span> A.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item === max);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>근데 위의 방법은 indexOf로 더 짧게 풀 수 있다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 56ms</span></span><br><span class="line"><span class="keyword">var</span> peakIndexInMountainArray = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.indexOf(<span class="built_in">Math</span>.max(...A))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>문제가 크게 어렵지 않아서 파이썬으로도 풀어봤다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 40ms</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peakIndexInMountainArray</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type A: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        number = <span class="number">0</span></span><br><span class="line">        before = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> A:</span><br><span class="line">            <span class="keyword">if</span> number &gt; <span class="number">1</span> <span class="keyword">and</span> i &lt; before:</span><br><span class="line">                <span class="keyword">return</span> number - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                number = number + <span class="number">1</span></span><br><span class="line">                before = i</span><br></pre></td></tr></table></figure></p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><p>파이썬의 for문은 자바스크립트의 for of처럼 i라는 변수에 리스트의 요소가 대입되니까 인덱스는 어떻게 구하지라고 생각했는데,<br>다음과 같이 <code>range</code>함수와 <code>len</code>함수를 이용하는 방법이 있었다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peakIndexInMountainArray</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type A: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(A)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> A[i] &gt; A[i<span class="number">-1</span>] <span class="keyword">and</span> A[i]&gt; A[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure></p><ul><li>range(): 숫자 리스트를 자동으로 만들어 주는 함수</li><li>len(): 리스트 내 요소의 개수를 돌려주는 함수</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/peak-index-in-a-mountain-array/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
