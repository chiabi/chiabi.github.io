<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chiabi&#39;s dev blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chiabi.github.io/"/>
  <updated>2018-10-04T07:27:04.460Z</updated>
  <id>http://chiabi.github.io/</id>
  
  <author>
    <name>chiabi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>프로그래머스 - [스택]쇠막대기</title>
    <link href="http://chiabi.github.io/2018/09/28/programmers-stack/"/>
    <id>http://chiabi.github.io/2018/09/28/programmers-stack/</id>
    <published>2018-09-27T16:10:46.000Z</published>
    <updated>2018-10-04T07:27:04.460Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42585" target="_blank" rel="noopener">프로그래머스 문제링크</a></p><blockquote><p>여러 개의 쇠막대기를 레이저로 절단하려고 합니다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자릅니다. 쇠막대기와 레이저의 배치는 다음 조건을 만족합니다.</p><ul><li>쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있습니다.</li><li>쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓습니다.</li><li>각 쇠막대기를 자르는 레이저는 적어도 하나 존재합니다.</li><li>레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않습니다.<br>아래 그림은 위 조건을 만족하는 예를 보여줍니다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향입니다.<br><img src="/images/programmers_stack.png" alt="출처: 프로그래머스 코딩테스트 연습 &gt; 스택/큐 &gt;쇠막대기"></li></ul><p>이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있습니다.</p><ul><li>(a) 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ‘()’으로 표현합니다. 또한 모든 ‘()’는 반드시 레이저를 표현합니다.</li><li>(b) 쇠막대기의 왼쪽 끝은 여는 괄호 ‘(‘로, 오른쪽 끝은 닫힌 괄호 ‘)’로 표현됩니다.<br>위 예의 괄호 표현은 그림 위에 주어져 있습니다.<br>쇠막대기는 레이저에 의해 몇 개의 조각으로 잘리는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3 개와 2 개의 조각으로 잘리고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17 개의 조각으로 잘립니다.</li></ul><p>쇠막대기와 레이저의 배치를 표현한 문자열 arrangement 가 매개변수로 주어질 때, 잘린 쇠막대기 조각의 총 개수를 return 하도록 solution 함수를 작성해주세요.</p><ul><li>제한사항<ul><li>arrangement 의 길이는 최대 100,000 입니다.</li><li>arrangement 의 여는 괄호와 닫는 괄호는 항상 쌍을 이룹니다.</li></ul></li><li>입출력 예<ul><li>arrangement: ()(((()())(())()))(())</li><li>return: 17</li></ul></li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">arrangement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">const</span> answer = arrangement.split(<span class="string">""</span>).reduce(<span class="function">(<span class="params">acc, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item === <span class="string">"("</span> &amp;&amp; arr[index + <span class="number">1</span>] !== <span class="string">")"</span>) &#123;</span><br><span class="line">      stack.push(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="string">")"</span> &amp;&amp; arr[index - <span class="number">1</span>] !== <span class="string">"("</span>) &#123;</span><br><span class="line">      stack.pop();</span><br><span class="line">      <span class="keyword">return</span> acc + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item === <span class="string">")"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> acc + stack.length;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>처음에 <code>map</code>을 이용해 탐색하면서 <code>answer</code>변수에 잘린 막대기 수를 담으려다가 그럴거면 <code>reduce</code>를 쓰면 될 것 같아서 수정했다.<br>괄호가 막대기인지 레이저인지를 먼저 구분했다.<br>막대기일 경우</p><ul><li>막대기 앞 부분(<code>(</code> 여는 괄호)일 경우 <code>stack</code>이라는 배열에 <code>push</code>를 한다.</li><li>막대기 뒤 부분(<code>)</code> 닫는 괄호)일 경우 <code>stack</code>이라는 배열에서 <code>pop</code>하고, 누적(<code>acc</code>)에 1 을 추가한다.</li></ul><p>무엇을 <code>push</code>하냐는 상관없을 것 같다. 레이저일때 스택에 쌓인 수를 얻어오는 부분도 <code>reduce</code>로 처리할까 생각해서 숫자 1 을 넣기는 했는데, <code>length</code>속성으로 구해오면 될 것 같다.</p><p>레이저일 경우는</p><ul><li>여는 괄호인데 다음 인덱스 아이템이 닫는 괄호인 경우</li><li>닫는 괄호인데 이전 인덱스 아이템이 여는 괄호인 경우</li></ul><p>이다. 레이저일 때는 <code>push()</code>, <code>pop()</code>을 하지 않으며, 레이저의 닫는 괄호를 만날 때 누적(<code>acc</code>)에 현재 쌓인 <code>stack</code>의 개수(<code>length</code>)를 추가했다.</p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">arrangement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="number">0</span>,</span><br><span class="line">    stack = [];</span><br><span class="line">  arrangement = arrangement.replace(<span class="regexp">/\(\)/g</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrangement.length; i++) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (arrangement[i]) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"("</span>:</span><br><span class="line">        stack.push(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"0"</span>:</span><br><span class="line">        stack = stack.map(<span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">")"</span>:</span><br><span class="line">        answer += stack[stack.length - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        stack.pop();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>레이저를 <code>replace</code>를 통해 0 으로 만들어 주고 <code>switch</code> 문을 쓰니까 조건 부분은 훨씬 깔끔해보인다.</p><p>그래서 내 풀이도 아래와 같이 수정해봤다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">arrangement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">const</span> answer = arrangement</span><br><span class="line">    .replace(<span class="regexp">/\(\)/g</span>, <span class="string">"."</span>)</span><br><span class="line">    .split(<span class="string">""</span>)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">acc, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item === <span class="string">"."</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> acc + stack.length;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="string">"("</span>) &#123;</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">        <span class="keyword">return</span> acc + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42585&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;프로그래머스 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여러 
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="프로그래머스" scheme="http://chiabi.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"/>
    
      <category term="스택" scheme="http://chiabi.github.io/tags/%EC%8A%A4%ED%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스 - [해시]완주하지 못한 선수</title>
    <link href="http://chiabi.github.io/2018/09/28/programmers_hash/"/>
    <id>http://chiabi.github.io/2018/09/28/programmers_hash/</id>
    <published>2018-09-27T16:10:46.000Z</published>
    <updated>2018-10-04T06:54:00.723Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42576?language=javascript" target="_blank" rel="noopener">프로그래머스 문제링크</a></p><blockquote><p>수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.<br>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p><ul><li><p>제한사항</p><ul><li>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.</li><li>completion의 길이는 participant의 길이보다 1 작습니다.</li><li>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.</li><li>참가자 중에는 동명이인이 있을 수 있습니다.</li></ul></li><li><p>입출력 예</p></li></ul><table><thead><tr><th>participant</th><th>completion</th><th>return</th></tr></thead><tbody><tr><td>[“leo”, “kiki”, “eden”]</td><td>[“eden”, “kiki”]</td><td>“leo”</td></tr><tr><td>[“marina”, “josipa”, “nikola”, “vinko”, “filipa”]</td><td>[“josipa”, “filipa”, “marina”, “nikola”]</td><td>“vinko”</td></tr><tr><td>[“mislav”, “stanko”, “mislav”, “ana”]</td><td>[“stanko”, “ana”, “mislav”]</td><td>“mislav”</td></tr></tbody></table><ul><li>입출력 예 설명<ul><li>예제 #1<br>“leo”는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</li><li>예제 #2<br>“vinko”는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</li><li>예제 #3<br>“mislav”는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.</li></ul></li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">participant, completion</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> completeMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> person <span class="keyword">of</span> completion) &#123;</span><br><span class="line">    <span class="keyword">const</span> mapItem = completeMap.get(person);</span><br><span class="line">    completeMap.set(person, mapItem ? mapItem + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> person <span class="keyword">of</span> participant) &#123;</span><br><span class="line">    <span class="keyword">const</span> mapItem = completeMap.get(person);</span><br><span class="line">    <span class="keyword">if</span>(!mapItem) &#123;</span><br><span class="line">      <span class="keyword">return</span> person;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      completeMap.set(person, mapItem - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>문제의 소분류가 해시이니 만큼 해시 테이블을 이용해 풀어보고 싶었다. 다음의 풀이에서 ES6의 <code>Map</code>객체 대신 일반적인 객체로 객체 리터럴과 속성 접근자를 사용해도 문제가 없으나 <code>Map</code>객체를 써보고 싶었다.  </p><p>먼저 완주자 배열을 순회해 다음 형태의 <code>completeMap</code>을 만든다. 키는 완주자 이름, 값은 완주자 이름이 동명이인일 것을 고려해서 수로 저장한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;stanko&quot;: 1, </span><br><span class="line">  &quot;ana&quot;: 1, </span><br><span class="line">  &quot;mislav&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>REPL에서 Map을 콘솔에 출력하면 다음과 같이 보여준다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map(3) &#123;&quot;stanko&quot; =&gt; 1, &quot;ana&quot; =&gt; 1, &quot;mislav&quot; =&gt; 1&#125;</span><br></pre></td></tr></table></figure></p><p>그 다음 참가자 배열을 순회해 해당 참가자 이름으로 <code>completeMap</code>을 탐색해 키가 있다면 저장된 값에 1을 뺀다. 만약 해당 키가 없거나, 저장된 값이 0이면 그 참가자를 반환한다. </p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><p>위 방법으로 풀고 나서 다른 사람들 풀이를 보니까 다음과 같이 <code>sort()</code>메서드를 이용해 <code>participant</code>배열과 <code>completion</code>배열을 각각 정렬한 뒤(기본 정렬 순서는 유니코드 코드 포인트 기준이다.) 두 정렬된 배열을 (선형으로) 비교하는 식으로 푼 풀이도 있었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">participant, completion</span>) </span>&#123;</span><br><span class="line">    participant.sort();</span><br><span class="line">    completion.sort();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> participant) &#123;</span><br><span class="line">        <span class="keyword">if</span>(participant[i] !== completion[i]) <span class="keyword">return</span> participant[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>요즘 책이랑 영상 강좌만 자꾸 보니까 알고리즘 문제를 풀고 싶어졌다. 적당히 자료구조에 대해서도 생각해볼 수 있고, 어렵지 않고 기분 전환하기 좋은 문제였다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42576?language=javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;프로그래머스 문제링크&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="프로그래머스" scheme="http://chiabi.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"/>
    
      <category term="해시" scheme="http://chiabi.github.io/tags/%ED%95%B4%EC%8B%9C/"/>
    
  </entry>
  
  <entry>
    <title>KAKAO BLIND RECRUITMENT 3차 - 파일명 정렬</title>
    <link href="http://chiabi.github.io/2018/09/10/kakao3/"/>
    <id>http://chiabi.github.io/2018/09/10/kakao3/</id>
    <published>2018-09-09T17:07:07.000Z</published>
    <updated>2018-09-28T07:38:25.019Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://programmers.co.kr/learn/courses/30/lessons/17686" target="_blank" rel="noopener">프로그래머스 문제링크</a></p><p>카카오 블라인드 테스트 엄청 어렵다. 그나마 이 문제가 그 중에서 쉬운 문제였을 것 같은데,<br>배열의 <code>sort</code>메소드로 풀다가 <code>sort</code> 메소드가 안전 정렬(stable sorting)이 아니라는 것이 기억나서 해당 메소드를 안전 정렬로 만들어 주는 방법을 찾았다.<br>해당 방법을 참고해서 겨우겨우 통과하긴 했는데, <code>sort</code>를 어떻게 안정적으로 만드냐를 알게 된 것에 의의를 둬야겠다.</p><p>자바스크립트에서 배열의 <code>sort</code>메소드에 인자로 전달되는 비교 함수(<code>compareFunction(a, b)</code>)이 반환하는 값이</p><ul><li>0보다 작으면 a가 먼저 온다.(a가 b보다 낮은 색인 정렬)</li><li>0보다 크면 b가 먼저 온다.</li><li>0이면 a와 b를 변경하지 않고 모든 다른 요소에 대해 정렬하는데, 이때 ECMAscript 표준은 이러한 동작을 보장하지 않는다고 한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> answerWrap = files.map(<span class="function">(<span class="params">file, index</span>) =&gt;</span> (&#123;file, index&#125;));</span><br><span class="line">    <span class="keyword">const</span> compare = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> reg = <span class="regexp">/(\D*)(\d*)/i</span>;</span><br><span class="line">      <span class="keyword">const</span> A = a.match(reg);</span><br><span class="line">      <span class="keyword">const</span> B = b.match(reg);</span><br><span class="line">      <span class="keyword">const</span> compareHead = A[<span class="number">1</span>].toLowerCase().localeCompare(B[<span class="number">1</span>].toLowerCase());</span><br><span class="line">      <span class="keyword">const</span> compareNumber = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">parseInt</span>(a) &gt; <span class="built_in">parseInt</span>(b) ? </span><br><span class="line">            <span class="number">1</span> : <span class="built_in">parseInt</span>(a) &lt; <span class="built_in">parseInt</span>(b) ? </span><br><span class="line">             <span class="number">-1</span> </span><br><span class="line">            : <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> compareHead === <span class="number">0</span> ? compareNumber(A[<span class="number">2</span>], B[<span class="number">2</span>]) : compareHead</span><br><span class="line">    &#125;</span><br><span class="line">    answerWrap.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = compare(a.file, b.file);</span><br><span class="line">      <span class="keyword">return</span> result === <span class="number">0</span> ? a.index - b.index : result;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> answerWrap.map(<span class="function"><span class="params">answer</span> =&gt;</span> answer.file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 방법은 map 메소드를 이용해 요소와 인덱스 정보를 가진 객체를 요소로 가지는 배열을 만들어서<br>비교함수에서는 요소간 비교하고, 반환되는 값이 0일때는 인덱스 정보를 이용해 원래 위치를 비교해 정확한 순서를 얻는다.  </p><ul><li><a href="https://code-examples.net/ko/q/15c898" target="_blank" rel="noopener">참고: Javascript - 자바 스크립트에서 빠른 안정적인 정렬 알고리즘 구현</a></li><li><a href="http://blog.vjeux.com/2010/javascript/javascript-sorting-table.html" target="_blank" rel="noopener">참고: Javascript - Sorting Table</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/17686&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;프로그래머스 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;카카오 블라인드 테스트 엄청 
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="프로그래머스" scheme="http://chiabi.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"/>
    
      <category term="KAKAO BLIND RECRUITMENT 3차" scheme="http://chiabi.github.io/tags/KAKAO-BLIND-RECRUITMENT-3%EC%B0%A8/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 사용할 때 &#39;Cannot find module ...&#39; 에러</title>
    <link href="http://chiabi.github.io/2018/08/30/typescript/"/>
    <id>http://chiabi.github.io/2018/08/30/typescript/</id>
    <published>2018-08-30T14:51:23.000Z</published>
    <updated>2018-08-30T16:18:36.214Z</updated>
    
    <content type="html"><![CDATA[<p>웹팩과 타입스크립트를 공부하면서 <a href="https://github.com/chiabi/vending-machine-js" target="_blank" rel="noopener">자동판매기 프로젝트</a>를 진행하다가 문제가 발생했다.<br>처음에 loader등의 웹팩 설정에서 뭘 잘못한 줄 알았다. 결론적으로 문제는 <code>tsconfig.js</code>파일을 수정해 해결했다.</p><p>node_modules로 설치한 다른 라이브러리 모듈을 찾지 못하는 문제였는데, 예를 들어 <code>npm install --save redux</code>로 리덕스를 설치하고<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; CreateStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br></pre></td></tr></table></figure></p><p>위와 같이 불러오려고 했는데 모듈을 찾지 못한다고 에러가 발생했다.<br>(참고로 <code>@types/redux</code>는 더이상 사용되지 않는다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR in [at-loader] ./src/app.ts:1:16</span><br><span class="line">    TS2307: Cannot find module &apos;redux&apos;.</span><br></pre></td></tr></table></figure><p>‘ts-loader’를 사용했을 때는 VS Code의 문제(PROBLEMS)탭에서 <code>&#39;redux&#39; 모듈을 찾지 못했습니다.</code>라고 나왔고, ‘awesome-typescript-loader’를 사용했을 때는 터미널 탭에서 위와 같이 웹팩이 실행되면서 <code>Cannot find module &#39;redux&#39;</code>라고 나왔는데, 이건 환경에 따라 다를 수도 있을 것 같다. </p><p>문제가 발생했을 때의 <code>tsconfig.js</code>는 다음과 같았는데<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./dist"</span>,</span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"ES6"</span>,</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"ES5"</span>,</span><br><span class="line">    <span class="string">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>포스팅 하단에 적어둔 참고 링크들에서 다음과 같은 해결방법을 찾았다. 다음과 같이 <code>&quot;moduleResolution&quot;: &quot;node&quot;</code>를 추가했더니 문제가 해결되었다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./dist"</span>,</span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"ES6"</span>,</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"ES5"</span>,</span><br><span class="line"><span class="comment">//+ "moduleResolution": "node",</span></span><br><span class="line">    <span class="string">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위 옵션을 추가해도 해결되지 않는다면, 나의 경우처럼 VS Code를 종료하고 다시 열어야 해결될 수도 있다.</p><p><code>moduleResolution</code>옵션의 기본값은 <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener">타입스크립트 공식문서</a>에서 다음과 같이 쓰여있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module === &quot;AMD&quot; or &quot;System&quot; or &quot;ES6&quot; ? &quot;Classic&quot; : &quot;Node&quot;</span><br></pre></td></tr></table></figure><p><code>module</code> 옵션이 <code>AMD</code>, <code>System</code>, <code>ES6(혹은 ES2015)</code>일 경우에 기본값은 <code>Classic</code>이고 나머지는 <code>Node</code>이다.</p><p>타입스크립트 공식문서의 <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="noopener">Module Resolution</a>항목에 모듈 분석 전략 두 가지 방법인 <code>Classic</code>과 <code>Node</code>에 대한 설명이 나와있다.  </p><p>간단하게 정리하면 <code>import { b } from &quot;moduleB&quot;</code>와 같이 상대 경로가 아닌 모듈(non-relative module) 불러오기에서 <code>Classic</code>과 달리 <code>Node</code> 설정은 ‘node_modules’폴더를 찾아 모듈을 검색한다.</p><p><code>/root/src/A.ts</code>파일에 아래과 같이 상대 경로가 아닌 모듈(non-relative module) 불러오기를 했다고 하면<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /root/src/A.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; b &#125; <span class="keyword">from</span> <span class="string">"moduleB"</span></span><br></pre></td></tr></table></figure></p><p><code>Classic</code> 설정은 다음과 같은 순서로 <code>moduleB</code>를 찾는다.</p><ol><li><code>/root/src/moduleB.ts</code></li><li><code>/root/src/moduleB.d.ts</code></li><li><code>/root/moduleB.ts</code></li><li><code>/root/moduleB.d.ts</code></li><li><code>/moduleB.ts</code></li><li><code>/moduleB.d.ts</code></li></ol><p><code>Node</code> 설정은 다음과 같이 ‘node_modules’폴더를 찾아 해당 모듈을 검색한다.</p><ol><li><code>/root/src/node_modules/moduleB.ts</code></li><li><code>/root/src/node_modules/moduleB.tsx</code></li><li><code>/root/src/node_modules/moduleB.d.ts</code></li><li><code>/root/src/node_modules/moduleB/package.json</code> (if it specifies a “types” property)</li><li><code>/root/src/node_modules/moduleB/index.ts</code></li><li><code>/root/src/node_modules/moduleB/index.tsx</code></li><li><code>/root/src/node_modules/moduleB/index.d.ts</code></li><li><code>/root/node_modules/moduleB.ts</code></li><li><code>/root/node_modules/moduleB.tsx</code></li><li><code>/root/node_modules/moduleB.d.ts</code></li><li><code>/root/node_modules/moduleB/package.json</code> (if it specifies a “types” property)</li><li><code>/root/node_modules/moduleB/index.ts</code></li><li><code>/root/node_modules/moduleB/index.tsx</code></li><li><code>/root/node_modules/moduleB/index.d.ts</code></li><li><code>/node_modules/moduleB.ts</code></li><li><code>/node_modules/moduleB.tsx</code></li><li><code>/node_modules/moduleB.d.ts</code></li><li><code>/node_modules/moduleB/package.json</code> (if it specifies a “types” property)</li><li><code>/node_modules/moduleB/index.ts</code></li><li><code>/node_modules/moduleB/index.tsx</code></li><li><code>/node_modules/moduleB/index.d.ts</code></li></ol><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ul><li><a href="https://github.com/Microsoft/TypeScript/issues/8920#issuecomment-223052268" target="_blank" rel="noopener">Typescript issues - #8920</a></li><li><a href="https://github.com/Microsoft/TypeScript/issues/5039" target="_blank" rel="noopener">TypeScript issues - #5039</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="noopener">TypesScript: Module Resolution</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;웹팩과 타입스크립트를 공부하면서 &lt;a href=&quot;https://github.com/chiabi/vending-machine-js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;자동판매기 프로젝트&lt;/a&gt;를 진행하다가 문제가 발생했다.&lt;b
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://chiabi.github.io/categories/TypeScript/"/>
    
    
      <category term="TypeScript" scheme="http://chiabi.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/22/TIL/"/>
    <id>http://chiabi.github.io/2018/08/22/TIL/</id>
    <published>2018-08-22T14:12:44.000Z</published>
    <updated>2018-08-30T16:13:53.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018-08-18"><a href="#2018-08-18" class="headerlink" title="2018.08.18"></a>2018.08.18</h2><ul><li>리덕스를 적용한 vending machine 프로젝트를 진행하기로 함</li></ul><h2 id="2018-08-19"><a href="#2018-08-19" class="headerlink" title="2018.08.19"></a>2018.08.19</h2><ul><li>리덕스가 아직도 이해가 되지 않아서 다른 예제를 따라해보기로 했다.</li><li>도서구입: 러닝 리액트</li><li><a href="https://reactjs.org/tutorial/tutorial.html" target="_blank" rel="noopener">리액트 튜토리얼 틱택토 따라하기</a><ul><li><a href="https://engineering.huiseoul.com/react-redux-intro-bbff95b14cdf" target="_blank" rel="noopener">참고: Huiseoul 개발환경 적응기 (1) — React + Redux 이해하기</a></li></ul></li></ul><h2 id="2018-08-20"><a href="#2018-08-20" class="headerlink" title="2018.08.20"></a>2018.08.20</h2><ul><li>리액트 튜토리얼 틱택토(타임트래블), 틱택토 리덕스 연결<ul><li><a href="https://engineering.huiseoul.com/react-redux-tic-tac-toe-4a773928c425" target="_blank" rel="noopener">참고: Huiseoul 개발환경 적응기(2) — React + Redux Tic-Tac-Toe</a></li></ul></li><li>밴딩 머신 리액트로 만들어보기 이전에 바닐라 자바스크립트로 먼저 구현해보는 게 나을 것 같아서 프로젝트를 새로 만듦<ul><li>Parcel을 이용할 지, webpack을 이용할 지 고민하다가 Webpack을 공부해볼겸 Webpack을 적용하기로 함</li><li>babel, sass를 위한 로더를 설정함</li></ul></li><li><a href="http://webtech.gdg.kr/180820_chrome_dev_meetup/" target="_blank" rel="noopener">Chrome Dev Meetup by GDG Korea WebTech</a> 참여<ul><li>Session A - Progressive Web Apps</li><li>Session B - CSS Scroll Snap in 69</li></ul></li></ul><h2 id="2018-08-21"><a href="#2018-08-21" class="headerlink" title="2018.08.21"></a>2018.08.21</h2><ul><li>하이어링 데이 준비<ul><li>스쿨 사이트에 올린 이력서 업데이트(사이트의 텍스트 에디터가 날 괴롭게 해… 리스트 형식 스타일이 왜 그렇죠??)</li></ul></li><li>포트폴리오를 요구하는 곳들도 있어서 문서화하다가 디자인 때문에 괴로워짐</li><li>포트폴리오 사이트를 만들자는 생각에 포트폴리오 프로젝트 시작<ul><li>svg나 three.js 써서 화려하게 만들고 싶지만, 나중에 공부하면서 만들기로 하고 바닐라 자바스크립트 복습할 겸 밴딩 머신때 만든 웹팩 설정 가져다 메인 페이지 만들어 봤다.</li></ul></li></ul><h2 id="2018-08-22"><a href="#2018-08-22" class="headerlink" title="2018.08.22"></a>2018.08.22</h2><ul><li><a href="https://www.meetup.com/ko-KR/GDG-Seoul/events/253667073/?comment_table_id=494013070&amp;comment_table_name=event_comment" target="_blank" rel="noopener">[Meetup with Googler] introduction to AMP stories</a> 참여<ul><li>AMP 스토리 포맷에 대한 영상과 설명을 들으면서 20일 밋업 두번째 세션에서 점점 ‘구글같은 기업에서 다 만들어주고 우리는 가져다 선언식으로 쓰면되는 선언형 언어로 간다’는 말이 다시 생각났다.</li><li>애니메이션 효과가 들어가는 네이버 웹툰도 생각났다.</li><li><a href="https://www.ampproject.org/ko/stories" target="_blank" rel="noopener">AMP 스토리 포맷</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018-08-18&quot;&gt;&lt;a href=&quot;#2018-08-18&quot; class=&quot;headerlink&quot; title=&quot;2018.08.18&quot;&gt;&lt;/a&gt;2018.08.18&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;리덕스를 적용한 vending machine 프로젝트를 진
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/16/TIL/"/>
    <id>http://chiabi.github.io/2018/08/16/TIL/</id>
    <published>2018-08-16T13:18:24.000Z</published>
    <updated>2018-08-17T07:08:58.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018-08-12"><a href="#2018-08-12" class="headerlink" title="2018.08.12"></a>2018.08.12</h2><ul><li>타입스크립트 인터페이스 정리</li></ul><h2 id="2018-08-13"><a href="#2018-08-13" class="headerlink" title="2018.08.13"></a>2018.08.13</h2><ul><li>영어학원</li><li>타입스크립트 인터페이스 (함수인터페이스, 클래스 인터페이스)</li></ul><h2 id="2018-08-14"><a href="#2018-08-14" class="headerlink" title="2018.08.14"></a>2018.08.14</h2><ul><li>리덕스 카운터 예제</li><li>누구나 자료구조와 알고리즘 책 1 ~ 4장<ul><li>배열, 집합 - 이진검색/선형검색</li><li>빅오 표기법</li><li>버블정렬 </li></ul></li></ul><h2 id="2018-08-15"><a href="#2018-08-15" class="headerlink" title="2018.08.15"></a>2018.08.15</h2><ul><li>리덕스 심화 예제</li><li>누구나 자료구조와 알고리즘 책 5 ~ 6장<ul><li>선택정렬, 삽입정렬</li></ul></li></ul><h2 id="2018-08-16"><a href="#2018-08-16" class="headerlink" title="2018.08.16"></a>2018.08.16</h2><ul><li>리덕스 <ul><li>리덕스 API</li><li>리덕스 심화 예제</li><li>리덕스 미들웨어 실습</li></ul></li><li>누구나 자료구조와 알고리즘 책 7 ~ 8장<ul><li>해시 테이블</li><li>스택, 큐</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018-08-12&quot;&gt;&lt;a href=&quot;#2018-08-12&quot; class=&quot;headerlink&quot; title=&quot;2018.08.12&quot;&gt;&lt;/a&gt;2018.08.12&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;타입스크립트 인터페이스 정리&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/11/TIL/"/>
    <id>http://chiabi.github.io/2018/08/11/TIL/</id>
    <published>2018-08-11T09:20:03.000Z</published>
    <updated>2018-08-11T12:49:31.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="블록체인-하이어링-면접"><a href="#블록체인-하이어링-면접" class="headerlink" title="블록체인 하이어링 면접"></a>블록체인 하이어링 면접</h2><p>패스트캠퍼스에서 진행한 블록체인 하이어링 행사를 다녀왔다. 블록체인 개발자뿐만이 아니라 프론트엔드 개발자도 뽑고 있으니 지원해보라는 학원 측 제의에 이력서를 전달했고 면접일정이 잡혀서 보러간 거였는데, 블록체인 위주의 면접이 되어 당황스러웠다. 프론트엔드 개발자로써의 역량이나 목표보다는 블록체인에 대해 어느정도 구체적인 청사진을 그리고 있는 사람을 원하는 것 같았고, 블록체인에 대해 구체적인 방향성을 좀 더 가지는 게 좋을 거라는 조언을 들었다. 면접보다는 상담하는 자리가 되어버려 아쉽지만, 그래도 개인적으로 블록체인에 대해 잘 이해가 안되었던 걸 현업자에게 질문할 수 있는 자리가 되었고, 앞으로의 면접에 필요한 자세를 조언받아 도움이 되었다.<br>블록체인 서비스를 제공하면서 어떻게 수익을 낼 수 있는지나, 과연 어떤 서비스에 적용할 수 있는지, 속도에 관한 것에 대해 어떻게 생각하시는 지 여쭤봤는데 아직 블록체인 쪽은 많은 시행착오를 거치는 중이라는 느낌을 많이 받았고 또 다른 의문도 많이 생겨나서 오늘을 계기로 더 관심가지고 공부를 해봐야겠다.</p><h2 id="크립토좀비"><a href="#크립토좀비" class="headerlink" title="크립토좀비"></a>크립토좀비</h2><p>크립토좀비는 이더리움 상의 DApp 코딩과 solidity를 좀비 게임만들기를 통해 학습할 수 있도록하는 튜토리얼 사이트이다. 한글도 지원한다.</p><ul><li><a href="https://cryptozombies.io/ko" target="_blank" rel="noopener">크립토좀비</a></li><li><a href="https://share.cryptozombies.io/ko/lesson/1/share/chi?id=Z2l0aHVifDE1OTAwMTM0" target="_blank" rel="noopener">나의 첫번째 좀비</a></li></ul><hr><p>어제 기술면접도 어느정도 고려해서 복습을 하다보니 내가 아직 많이 부족하다는 걸 알았다. 계속 이론만 공부하는 것보단 현장에서 일을 하면서 배우는 것이 더욱 도움이 되겠지만, 구직하면서 더 열심히 공부해야겠구나 생각이 들었다.<br>챗봇 책 사둔것을 참고해서 토이프로젝트를 하려는데, 좀 충격을 받은 게 나는 분명 초판이 올해 6월이길래 이정도면 최신 정보일거라고 예상하고 샀다. 그러나 책에서 다루는 폴리머는 2.x 버전이고 현재는 3.0버전이 나왔다. 버전 앞의 수가 올라간만큼 큰 변화가 있었는데, <code>html</code>파일에서 작업되고, import도 <code>&lt;link rel=import href=&quot;foo.html&quot;&gt;</code>를 이용했던 방식에서 <code>js</code>파일 내에서 ES6 모듈 <code>import</code>를 사용하는 방식으로 변한 게 가장 컸다.<br>만약 당장 폴리머를 쓰는 회사를 가게 된다면, 2.x 버전을 유지보수할 가능성이 크겠지만. 6월 발간 책이 금방 지난 기능을 담게 될 정도로 프론트엔드의 변화가 굉장히 빠르구나를 새삼 느꼈다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;블록체인-하이어링-면접&quot;&gt;&lt;a href=&quot;#블록체인-하이어링-면접&quot; class=&quot;headerlink&quot; title=&quot;블록체인 하이어링 면접&quot;&gt;&lt;/a&gt;블록체인 하이어링 면접&lt;/h2&gt;&lt;p&gt;패스트캠퍼스에서 진행한 블록체인 하이어링 행사를 다녀왔
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/08/TIL/"/>
    <id>http://chiabi.github.io/2018/08/08/TIL/</id>
    <published>2018-08-08T14:59:13.000Z</published>
    <updated>2018-08-09T15:16:52.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="타입스크립트-공부"><a href="#타입스크립트-공부" class="headerlink" title="타입스크립트 공부"></a>타입스크립트 공부</h3><p>연결리스트를 만들면서 타입스크립트를 함께 써봤다. 만들면서 필요한 부분을 공식문서나 다른 글에서 찾아서 쓰는 식으로 써봤는데, <code>Object</code>타입은 내 예상과 다르게 동작했고, 문서를 읽어보니 실제로도 내가 원하는 동작을 하도록 하려면 유용하지 않았다. 그리고 <code>Array&lt;number&gt;</code>같은 표기도 등장한다. jest랑 같이 써보면서 느낀 점은 아직 둘 다 잘 알고 사용하는 건 아니라서 제대로 쓴 것 같지는 않지만, 확실히 내 코드가 나의 예상과 다른게 동작하고 있지 않은지 체크하는데 굉장히 유용했다. 그런데 테스트 코드 작성하는 것도 만드는 것 못지 않게 시간이 든다…</p><p>타입스크립트는 공식문서와 <a href="https://ahnheejong.gitbook.io/ts-for-jsdev/" target="_blank" rel="noopener">『자바스크립트 개발자를 위한 타입스크립트』</a>라는 안희종 개발자님이 Gitbook으로 연재한 글을 참고하고 있다.</p><p>ECMASciprt 파트는 대부분 아는 내용이라 빠르게 훑어봤는데, 내가 호이스팅에 대해서 잘못 알고 있던 부분이 있었다. ‘호이스팅은 <code>var</code>를 쓸 경우에만 일어난다’고 알고있었는데 <a href="http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified" target="_blank" rel="noopener">‘temporal-dead-zone’</a>이라는 개념이 있었다. 그거랑 분해 대입(비구조화 할당)를 따로 정리하면 좋을 것 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;타입스크립트-공부&quot;&gt;&lt;a href=&quot;#타입스크립트-공부&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/08/TIL/"/>
    <id>http://chiabi.github.io/2018/08/08/TIL/</id>
    <published>2018-08-08T14:48:20.000Z</published>
    <updated>2018-08-08T14:58:13.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="블로그-검색엔진-최적화"><a href="#블로그-검색엔진-최적화" class="headerlink" title="블로그 검색엔진 최적화"></a>블로그 검색엔진 최적화</h3><p>대부분의 글이 알고리즘 문제 풀이나 TIL뿐이어서 블로그 검색엔진 최적화를 계속 제일 나중에 할 일로 미루다가 오늘 했다.<br>hexo 블로그의 검색엔진 최적화 방법을 엄청 잘 정리해주신 글이 있어서 참고했다.</p><ul><li><a href="https://futurecreator.github.io/2016/06/15/hexo-google-site-search-console-analytics/" target="_blank" rel="noopener">구글(Goolge) 사이트 등록(Search Console)과 검색엔진 최적화(SEO)</a></li></ul><h3 id="Jest-Typescript-연결리스트"><a href="#Jest-Typescript-연결리스트" class="headerlink" title="Jest + Typescript + 연결리스트"></a>Jest + Typescript + 연결리스트</h3><p>Jest로 테스트하는 걸 연습하면서 타입스크립트를 써보면서 연결리스트를 구현하고 있다. 연결리스트를 좀 잘못 생각하고 있던 게 있어서 다시 짜면서 만들어보고 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;블로그-검색엔진-최적화&quot;&gt;&lt;a href=&quot;#블로그-검색엔진-최적화&quot; class=&quot;head
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/07/TIL/"/>
    <id>http://chiabi.github.io/2018/08/07/TIL/</id>
    <published>2018-08-07T14:26:29.000Z</published>
    <updated>2018-08-08T14:56:07.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="You-don’t-know-JS-값-정리중"><a href="#You-don’t-know-JS-값-정리중" class="headerlink" title="You don’t know JS: 값 정리중"></a>You don’t know JS: 값 정리중</h3><p>내용은 어렵지 않은데, ‘슬롯’이라는 용어를 처음 봤다. 슬롯이 뭐지? 슬롯 머신??? 그런데 딱히 ‘array slot’, ‘javascript slot’ 뭐 이런 키워드로 검색해도 나오지 않는 것 보면 어떤 정식 명칭 같은 것은 아니고 그냥 슬롯 머신의 그 슬롯처럼 영어 뜻 그대로 ‘무언가 들어갈 자리, 구멍’의 의미로 쓴 것 같다. </p><p>그리고 검색하다가 나온건데 웹컴포넌트 관련해서 <code>&lt;slot&gt;</code>태그가 있다.</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot" target="_blank" rel="noopener">HTML slot</a></li></ul><h3 id="Jest와-타입스크립트-같이-쓰는-환경-구성"><a href="#Jest와-타입스크립트-같이-쓰는-환경-구성" class="headerlink" title="Jest와 타입스크립트 같이 쓰는 환경 구성"></a>Jest와 타입스크립트 같이 쓰는 환경 구성</h3><p>이왕 Jest도 공부하면서 타입스크립트로 같이 공부하자는 생각에 일단 환경을 설정했다.</p><p>참고한 글</p><ul><li><a href="https://gongzza.github.io/javascript/learning-typescript-with-jest/" target="_blank" rel="noopener">Jest로 TypeScript 학습테스트 환경 만들기</a></li></ul><h3 id="구입한-책"><a href="#구입한-책" class="headerlink" title="구입한 책"></a>구입한 책</h3><ul><li><a href="https://kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;ejkGb=KOR&amp;barcode=9791160505061&amp;orderClick=JAj" target="_blank" rel="noopener">누구나 자료 구조와 알고리즘</a></li><li><a href="https://kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;ejkGb=KOR&amp;barcode=9791186697641&amp;orderClick=JAj" target="_blank" rel="noopener">누구나 쉽게 배우는 챗봇 서비스</a></li></ul><p>(의도한 것은 아니지만 출판사가 다른데도 책 제목이 너무나 쉽게 가려는 나의 마음을 반영하는 것 같군…)<br>서점 들린김에 읽어보다가 마음에 들어서 구입했다. 특히 챗봇은 취향저격이라. 공부하고 싶었던 것들이 한번에…(오오 폴리머!! 파이어베이스!!! 슬랙봇!!!) 책 따라서 만들어보고 리액트로도 도전해보는 걸 목표로 해야겠다. 나도 슬랙봇 만들어야지!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;You-don’t-know-JS-값-정리중&quot;&gt;&lt;a href=&quot;#You-don’t-know
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/06/TIL/"/>
    <id>http://chiabi.github.io/2018/08/06/TIL/</id>
    <published>2018-08-05T15:00:00.000Z</published>
    <updated>2018-08-07T06:49:57.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="Move-Zeroes-파이썬-문제풀이"><a href="#Move-Zeroes-파이썬-문제풀이" class="headerlink" title="Move Zeroes 파이썬 문제풀이"></a>Move Zeroes 파이썬 문제풀이</h3><p>어제 풀었던 Move Zeroes 문제에 파이썬 풀이도 추가했다. 파이썬으로 풀어보면서 리스트가 자바스크립트의 배열과 어떻게 다른지도 알아볼 수 있었다. 그리고 좀 신기했던 게 다른 사람 풀이를 보면서 또 찾아봤는데, 자바스크립트에서 분해대입이 아닌 이상은 변수를 콤마로 구분해 같이 선언하고 할당하는 게 안되는데, 파이썬에서는 가능하다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>, b = <span class="number">2</span>; <span class="comment">// 이것은 가능하지만</span></span><br><span class="line"><span class="keyword">const</span> a, b = <span class="number">1</span>, <span class="number">2</span>; <span class="comment">// 이것은 불가능하다. </span></span><br><span class="line"><span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>, b = <span class="number">2</span> </span><br><span class="line"><span class="comment"># 이것은 불가능하지만</span></span><br><span class="line"><span class="comment"># SyntaxError: can't assign to literal</span></span><br><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="comment"># 이것은 가능하다</span></span><br></pre></td></tr></table></figure><p>좀 헷갈리기는 하는데, 다른 언어를 배우면서 비교해보는 것도 재미있다. 파이썬에서 내 기준 묘한 사용법을 보게되면, ‘어 이거 자바스크립트는 안되지 않나?’하면서 테스트해보고 비교해보니까 같이 공부가 된다.</p><h3 id="You-don’t-know-JS-타입-정리"><a href="#You-don’t-know-JS-타입-정리" class="headerlink" title="You don’t know JS: 타입 정리"></a>You don’t know JS: 타입 정리</h3><p>카일 심슨의 You don’t know JS를 보면서 내용을 정리하고 이전에 배웠던 내용을 정리하고 있다.<br>책을 읽으면서 정리하려고 했는데 번역이 조금 아쉬웠다. 예를 들면 ‘<code>null</code>은 <code>falsy</code>한 유일한 원시 값이지만, 타입은 <code>object</code>인 특별한 존재다.’라는 문장이 있었다. <code>undefined</code>도 <code>0</code>도 빈문자열도 다 <code>falsy</code>인 원시값인데 왜 저렇게 썼지 의문이 들어서 github에 올려져 있는 원문을 찾았다. </p><blockquote><p>null is the only primitive value that is “falsy” (aka false-like; see Chapter 4) but that also returns “object” from the typeof check.</p></blockquote><p>라고 되어있는데 이문장을 ‘<code>null</code>은 <code>falsy</code>이면서, <code>typeof</code> 체크에서 <code>object</code>를 반환하는 유일한 원시값이다.’라고 번역했어야 되지 않을까 싶다.(이문장도 매끄러운 번역인지는 잘 모르겠다. 부끄럽게도 영어를 잘 못한다…)<br>그래서 원문이랑 책을 번갈아 보기로 했다.<br>자바스크립트에 대한 이해가 없었을 때는 좀 어렵게 느껴진 책이었는데, 지금은 놓치고 있는 자바스크립트의 특성을 하나씩 짚어내면서 더 깊이 다지는 느낌으로 읽을 수 있게 되었다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;Move-Zeroes-파이썬-문제풀이&quot;&gt;&lt;a href=&quot;#Move-Zeroes-파이썬-문
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/05/TIL/"/>
    <id>http://chiabi.github.io/2018/08/05/TIL/</id>
    <published>2018-08-05T14:36:59.000Z</published>
    <updated>2018-08-07T06:30:15.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="이력서-작성"><a href="#이력서-작성" class="headerlink" title="이력서 작성"></a>이력서 작성</h3><p>이력서 작성하는 게 공부하는 것보다 제일 어려운 것 같다. 특히 자소서….</p><h3 id="Move-Zeroes-알고리즘-문제풀이"><a href="#Move-Zeroes-알고리즘-문제풀이" class="headerlink" title="Move Zeroes 알고리즘 문제풀이"></a>Move Zeroes 알고리즘 문제풀이</h3><p>나는 이 문제에서 splice와 push 메서드를 빼면 원본 배열의 변형을 주면서 어떻게 풀 수 있을까 생각이 잘 안났는데, 내가 loop를 한번만 도는 것에만 집중해서 그런 것 같다. 다른 사람의 풀이를 보니 for문을 두번 사용했지만 메서드 없이 인덱싱만으로 풀어냈다. 그리고 2번째 for문은 0이 들어갈 자리의 개수만큼만 도니까 그리 비효율적이지도 않다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;이력서-작성&quot;&gt;&lt;a href=&quot;#이력서-작성&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Moved ZeroS</title>
    <link href="http://chiabi.github.io/2018/08/05/moveZeroes/"/>
    <id>http://chiabi.github.io/2018/08/05/moveZeroes/</id>
    <published>2018-08-05T14:35:38.000Z</published>
    <updated>2018-08-09T06:22:12.309Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p><p><strong>Example:</strong></p><ul><li>Input: [0,1,0,3,12]</li><li>Output: [1,3,12,0,0]</li></ul><p><strong>Note:</strong><br>You must do this in-place without making a copy of the  array.<br>Minimize the total number of operations.</p></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>원본 배열에 변형을 주는 <code>splice()</code> 메서드와 <code>push()</code> 메서드를 사용했다. 배열 요소가 0일경우 splice 메서드를 통해 해당 요소는 삭제하고 push 메서드를 통해 0을 배열의 뒤쪽에 추가해줬다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 68ms</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, l = nums.length;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; l) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] === <span class="number">0</span>) &#123;</span><br><span class="line">            nums.splice(i, <span class="number">1</span>);</span><br><span class="line">            nums.push(<span class="number">0</span>);</span><br><span class="line">            l--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>자바스크립트에서 푼 풀이방법으로 list의 메서드를 이용해 풀었다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span>  range(l):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span>:</span><br><span class="line">                nums.remove(<span class="number">0</span>)</span><br><span class="line">                nums.append(<span class="number">0</span>)</span><br><span class="line">                l -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>count() 메서드를 통해 0인 요소의 개수를 세어 그만큼 for문을 돌리는 방법을 사용했다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = nums.count(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span>  range(l):</span><br><span class="line">            nums.remove(<span class="number">0</span>)</span><br><span class="line">            nums.append(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><h3 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>0이 아닌 요소만 다시 배열에 순서대로 담아주고, index부터 총 길이까지 0을 추가해줬다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            nums[index] = nums[i];</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt; nums.length; i++) &#123;</span><br><span class="line">        nums[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != <span class="number">0</span>:</span><br><span class="line">                nums[idx], nums[i] = nums[i], nums[idx]</span><br><span class="line">                idx += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>자바스크립트에서는 객체와 변수의 분해대입이 아니라면 변수를 <code>,</code>(콤마)로 구분해 값을 한번에 할당할 수가 없는데, 파이썬에서는 가능하다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a, b = <span class="number">1</span>, <span class="number">2</span>; <span class="comment">// 이것은 문법적으로 허용되지 않고</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = b = <span class="number">1</span>; <span class="comment">// 이것은 b가 전역 변수가 되기 때문에 좋은 방법이 아니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 대신 다음과 같은 객체와 배열의 분해대입은 가능하다.</span></span><br><span class="line"><span class="keyword">const</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;a, b&#125; = obj</span><br></pre></td></tr></table></figure></p><p>파이썬에서는 다음과 같은 방법으로 변수를 만들 수 있다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">a, b = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(a, b) = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">[a, b] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a = b = <span class="string">'python'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero 
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/04/TIL/"/>
    <id>http://chiabi.github.io/2018/08/04/TIL/</id>
    <published>2018-08-04T14:12:44.000Z</published>
    <updated>2018-08-04T16:59:11.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="House-Robber-알고리즘-문제풀이"><a href="#House-Robber-알고리즘-문제풀이" class="headerlink" title="House Robber 알고리즘 문제풀이"></a>House Robber 알고리즘 문제풀이</h3><p>프로그래머스의 땅따먹기 문제의 악몽이… 생각보다 어려워서 조금 시간이 걸렸다. 처음에는 막연히 filter랑 reduce 같은 걸 써야하나?라고 생각했는데 그보다는 더 복잡했다. 단순히 하나를 건너뛰는게 아니라 <code>[2, 1, 1, 2]</code>같이 0번째와 3번째가 아니라 0번째와 4번째의 조합이 가장 큰 수인 경우도 있어서 어떤 규칙을 찾아야했다.<br>leetcode에서 Dynamic Programming으로 분류되어 있길래 관련해서도 정리해봤다. 정리하면서 내가 쓴 방법이 메모이제이션임을 알게되었고 피보나치 수열을 예로 설명을 정리해보니 메모이제이션에 대해 이해가 되었다.</p><h3 id="블로그-수정"><a href="#블로그-수정" class="headerlink" title="블로그 수정"></a>블로그 수정</h3><ul><li>헤더, follow 버튼, 링크 컬러 수정</li><li>하단 탑 버튼 디자인 수정</li></ul><h3 id="블록체인-이해하기"><a href="#블록체인-이해하기" class="headerlink" title="블록체인 이해하기"></a>블록체인 이해하기</h3><p>블록체인을 기반으로 하겠다는 기술도 기업도 많다. 내가 블록체인에 대해 알고 있는 것은 조작이 어려워 안전하고 익명이지만 추적가능하고 거래 투명성을 보장한다는 것 정도이다. 블록체인의 기술 구현보다 이 기술의 실효성에 대해 이해가 잘 안되어서 오늘은 관련 글을 이것저것 찾아서 읽어봤다. </p><ul><li>블록체인으로 가능한 비즈니스 모델이 이해가 안되어서 참고할만한 포스팅<ul><li><a href="http://www.venturesquare.net/762522" target="_blank" rel="noopener">블록체인, 미디어의 미래를 말하다</a> </li><li><a href="http://www.venturesquare.net/762522" target="_blank" rel="noopener">블록체인 기술의 실체 그리고 미래</a></li><li><a href="https://brunch.co.kr/@inuitchained/2" target="_blank" rel="noopener">블록체인에서 가능한 재미난 비즈니스 모델</a></li></ul></li><li>그림으로 쉽게 이해하기 <ul><li><a href="https://steemkr.com/kr/@tintom/2fgvq8" target="_blank" rel="noopener">초딩도 이해하는 블록체인</a> : </li></ul></li><li>블록체인과 비트코인 좀 더 깊게 이해하기<ul><li><a href="https://blog.iwanhae.ga/introduction_of_bitcoin/" target="_blank" rel="noopener">원리부터 파악하는 비트코인</a> </li><li><a href="https://homoefficio.github.io/2017/11/19/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8-%ED%95%9C-%EB%B2%88%EC%97%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" target="_blank" rel="noopener">블록체인 한번에 이해하기</a></li><li><a href="http://abc1211.tistory.com/516?category=1003529" target="_blank" rel="noopener">길위의 개발자 - 자바스크립트로 블록체인 구현강좌</a></li></ul></li></ul><p>읽으면서도 계속 의문점이 들었던 거는 블록체인의 본질이라고 할 수 있는 탈중앙화의 의미 때문이었는데, 어떤 곳에서 플랫폼을 제공하고 그 플랫폼에서 이루어지는 거래의 수수료를 떼는 구조라면 또다른 중앙화랑 뭐가 다른가 싶어서였다. 그런데 이 부분은 나는 경제와 권력의 관점에서 진정한 탈중앙화의 의미에 너무 치중해서 생각하고 있어서 그런 것 같다. 데이터의 분산과 그에 따라 더 보안을 보장할 수 있는 것, 그리고 기여자들에게도 그 대가가 돌아가는 구조라는 점에서 효용성을 봐야할 것 같다. 그리고 또 하나는 속도인데… 이거는 EOS에 대해서도 좀 더 찾아봐야겠다.  </p><hr><p><em>drafts에 글 배포 잊지말자;;</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;House-Robber-알고리즘-문제풀이&quot;&gt;&lt;a href=&quot;#House-Robber-알고
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>House Robber</title>
    <link href="http://chiabi.github.io/2018/08/04/HouseRobber/"/>
    <id>http://chiabi.github.io/2018/08/04/HouseRobber/</id>
    <published>2018-08-04T02:01:41.000Z</published>
    <updated>2018-08-04T16:16:50.067Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p><p><strong>Example 1:</strong></p><ul><li>Input: [1,2,3,1]</li><li>Output: 4</li><li>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).<br>Total amount you can rob = 1 + 3 = 4.</li></ul><p><strong>Example 2:</strong></p><ul><li>Input: [2,7,9,3,1]</li><li>Output: 12</li><li>Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).<br>Total amount you can rob = 2 + 9 + 1 = 12.</li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><p>문제에 주어진 배열이 <code>[1, 2, 3]</code>이라고 했을 때 <code>1 + 3</code>과 <code>2</code>를 비교하게 되고, <code>[1, 2, 3, 4]</code>일 경우는 <code>1 + 3</code>과 <code></code>2 + 4<code>를 비교하게 되는데 그러면 홀수번과 다음 수를 비교할 때는</code>even = Math.max(1 + 3, 2)<code>이 되고, 짝수번의 요소와 다음 수를 비교하면</code>odd = Math.max(4, 2 + 4)<code>가 된다. 이런 규칙을 이용해서 푸는데, 만약 빈배열이거나 요소가 1개일 경우를 위해</code>even<code>과</code>odd`는 0을 기본값으로 할당해줬다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 60ms</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> even = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> odd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            even = <span class="built_in">Math</span>.max(even + nums[i], odd);           </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            odd = <span class="built_in">Math</span>.max(even, odd + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(even, odd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예전에 푼 프로그래머스 땅따먹기 문제랑 비슷한 것 같다. 이것도 너무 오래 걸렸다. 이런 유형의 알고리즘을 <strong>Dynamic Programming(DP)</strong>이라고 하는 것 같다.</p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><p>빈배열, 배열 요소가 하나일 때, 2개 일때는 따로 값을 반환하고, 3개 이상일 경우부터 <code>n: Max(n+s(n-2), s(n-1))</code>같은 규칙을 따른다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1: 1</span></span><br><span class="line">    <span class="comment">// 1,2: Max(1, 2)</span></span><br><span class="line">    <span class="comment">// 1,2,3: Max(3+s([1]), s([1,2]))</span></span><br><span class="line">    <span class="comment">// 1,2,3,4: Max(4+s([1,2]), s([1,2,3]))</span></span><br><span class="line">    <span class="comment">// n: Max(n+s(n-2), s(n-1))</span></span><br><span class="line">    <span class="keyword">if</span>(!nums.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(nums.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(nums.length === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> dp = [];</span><br><span class="line">    </span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// dp[2] = Math.max(nums[2] + dp[0], dp[1]);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">Math</span>.max(nums[i]+dp[i<span class="number">-2</span>], dp[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[dp.length - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="Dynamic-Programming-DP"><a href="#Dynamic-Programming-DP" class="headerlink" title="Dynamic Programming(DP)"></a>Dynamic Programming(DP)</h2><p>동적 프로그래밍</p><p>문제를 여러 개의 하위 문제로 나누어 푼 다음, 그것을 결합하여 최종적인 목적에 도달하는 방법으로 하위 문제의 값을 저장해두어(memozation) 그 하위 문제를 반복해서 풀어야 하는 경우 다시 계산하지 않고 재사용하는 식으로 계산 횟수를 줄일 수 있다.</p><p>모든 방법을 일일이 검토해 그 중 최적의 풀이법을 찾아내야 하기 때문에 최적의 방법(혹은 최단 경로)를 찾아내기 위한 시간이 걸리지만 그 결과는 가장 최적의 방법(최단 경로)라고 장담할 수 있다.</p><p>이를 이용한 알고리즘으로 최장 공통 부분 수열, 벨만-포드 알고리즘, 배낭문제 등이 있다.</p><p>피보나치 수열 문제의 경우 재귀적으로 다음과 같이 풀 수 있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233...</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibo = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">  <span class="keyword">return</span> fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 경우 <code>fibo(5)</code>를 구할 경우 다음과 같이 계산되는데, <code>fibo(n)</code>이 중복되어 계산되는 부분이 있어서, 전체적인 계산 속도를 떨어뜨린다.(이 알고리즘의 시간 복잡도는 지수함수가 된다.)</p><ul><li><code>fibo(5)</code></li><li><code>fibo(4) + fibo(3)</code></li><li><code>(fibo(3) + fibo(2)) + (fibo(2) + fibo(1))</code></li><li><code>((fibo(2) + fibo(1)) + (fibo(1) + fibo(0))) + ((fibo(1) + fibo(0)) + fibo(1))</code></li><li><code>(((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) + fib(1))</code></li></ul><p>이를 계산했던 값을 저장하는 메모이제이션을 이용해 동적 프로그래밍 방법으로 풀어본다면 다음과 같이 풀 수 있다. 이렇게 하면 중복되는 계산이 줄어든다.(시간 복잡도는 <math><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></math>이 된다.)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacci = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> memo = &#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> fibo = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span> || memo[n]) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[n]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            memo[n] = fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> memo[n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> fibo(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>참고</p><ul><li><a href="https://en.wikipedia.org/wiki/Dynamic_programming" target="_blank" rel="noopener">Wikipedia - Dynamic programming</a></li><li><a href="https://www.geeksforgeeks.org/dynamic-programming/#concepts" target="_blank" rel="noopener">GeeksforGeeks - Dynamic Programming</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/house-robber/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yo
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/03/TIL/"/>
    <id>http://chiabi.github.io/2018/08/03/TIL/</id>
    <published>2018-08-02T15:00:00.000Z</published>
    <updated>2018-08-04T16:57:24.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="Jest-공부하기"><a href="#Jest-공부하기" class="headerlink" title="Jest 공부하기"></a>Jest 공부하기</h3><p>자료구조를 만들어보면 테스트를 어떻게 할 지 고민을 했다. 처음에는 HTML 파일을 만들어서 script로 넣어서 콘솔에 넣을까 생각했다. ES6를 사용하니까 babel과 parcel 문서를 보고 환경을 만들다가 javascript-algorithm 처럼 테스트 환경을 만들어 보는 게 나을 것 같아서 Jest로 테스트 환경을 만들기로 했다. </p><p>Jest 문서의 <a href="https://jestjs.io/docs/en/getting-started.html" target="_blank" rel="noopener">Getting Started</a>를 참고해서 sum 함수를 테스트 해보려다가 다음과 같은 에러가 발생했다.</p><p><img src="/images/post_20180803_jest.jpg" alt="SecurityError: localStorage is not available for opaque origins"></p><p><a href="https://github.com/facebook/jest/issues/6766" target="_blank" rel="noopener">Jest 깃헙의 이슈</a>를 참고해서 <code>package.json</code>에 다음과 같이 <code>testURL</code>값을 <code>http://localhost/</code> 로 해서 jest 설정 부분을 추가했다. 해당 옵션은 ‘jsdom’환경의 URL을 설정한다고 한다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"jest"</span>: &#123;</span><br><span class="line">    <span class="attr">"verbose"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"testURL"</span>: <span class="string">"http://localhost/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 부분은 <code>jest.config.js</code>파일을 만들어서 다음과 같이 추가해도 된다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  verbose: <span class="literal">true</span>,</span><br><span class="line">  testURL: <span class="string">"http://localhost/"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>verbose</code>는 테스트 결과를 자세히 보고할 지 여부인데 기본값이 <code>false</code>라서 같이 추가해줬다.</p><ul><li><a href="https://jestjs.io/docs/en/configuration.html#verbose-boolean" target="_blank" rel="noopener">Configuring Jest</a></li></ul><h3 id="영어학원-등록"><a href="#영어학원-등록" class="headerlink" title="영어학원 등록"></a>영어학원 등록</h3><p>나는 외국을 안 나갈거니까 영어 따위는 필요없다고 호기롭게 말했던 학생때의 나를 때려주고 싶다. 사실 개발을 하게 될 줄도 몰랐지만… 영어와 뗄래야 뗄 수 없는 관계가 될 줄도 몰랐다.<br>개발 공부하면서 영어 공부의 필요성을 무지막지하게 느끼고 있다. 아직까지는 수능영어 공부할 때와 공무원 영어 공부하면서 얻은 독해 실력과 구글 번역기로 연명하고 있는데, 좀 더 빨리 읽고 싶고, 의미를 더 잘 이해하고 싶고 무엇보다 자막없는 컨퍼런스 영상을 이해하고 싶다. 그리고 커밋 메시지 비문없이 영어로 적고 싶다!  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;Jest-공부하기&quot;&gt;&lt;a href=&quot;#Jest-공부하기&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/08/02/TIL/"/>
    <id>http://chiabi.github.io/2018/08/02/TIL/</id>
    <published>2018-08-01T15:00:00.000Z</published>
    <updated>2018-08-04T16:12:55.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="자료구조-연결리스트-풀이"><a href="#자료구조-연결리스트-풀이" class="headerlink" title="자료구조 연결리스트 풀이"></a>자료구조 연결리스트 풀이</h3><ul><li><a href="https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/linked-list/README.md" target="_blank" rel="noopener">javascript-algorithms : Linked List</a></li><li><a href="https://leetcode.com/problems/design-linked-list/description/" target="_blank" rel="noopener">leetcode : Linked List</a></li></ul><p>연결리스트 설명부분만 먼저 보고, leetcode에 관련 문제가 있어서 먼저 구현해봤다. 연결리스트 설명이 블록체인에 대해 유튜브에서 간단히 설명했을때의 구조와 비슷한 것 같아서 흥미로웠다.<br>처음에 설명만 읽어서는 배열 안에 넣어야하나라고 생각했다. 그런데 배열 자체가 이미 push, pop을 할 수 있고, 인덱스로 해당 값을 구할 수 있다. 그래서 <a href="https://www.zerocho.com/category/Algorithm/post/58008a628475ed00152d6c4d" target="_blank" rel="noopener">ZeroCho</a>님의 블로그에서의 설명을 더 참고했다. 자바스크립트는 이미 배열로 연결 리스트가 구현되어 있어서, 객체로 만들어본다고 했다. 거기서 아이디어를 얻어서 leetcode 문제를 바탕으로 풀어봤다. 풀이는 <a href="https://github.com/chiabi/TIL/blob/master/Data-Structures/LinkedList/01.LinkedList.md" target="_blank" rel="noopener">github TIL 레포지토리</a>에 올렸는데 좀 더 정리되면 블로그에 올려야겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;자료구조-연결리스트-풀이&quot;&gt;&lt;a href=&quot;#자료구조-연결리스트-풀이&quot; class=&quot;he
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>keyboardRow</title>
    <link href="http://chiabi.github.io/2018/08/01/keyboardRow/"/>
    <id>http://chiabi.github.io/2018/08/01/keyboardRow/</id>
    <published>2018-08-01T06:56:42.000Z</published>
    <updated>2018-09-28T07:38:15.277Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/keyboard-row/description/" target="_blank" rel="noopener">leetcode 문제링크</a></p><blockquote><p>Given a List of words, return the words that can be typed using letters of alphabet on only one row’s of American keyboard like the image below.</p><p><strong>Example 1:</strong></p><ul><li>Input: [“Hello”, “Alaska”, “Dad”, “Peace”]</li><li>Output: [“Alaska”, “Dad”]</li></ul><p><strong>Note:</strong></p><ul><li>You may use one character in the keyboard more than once.</li><li>You may assume the input string will only contain letters of alphabet.</li></ul></blockquote><h2 id="나의-풀이"><a href="#나의-풀이" class="headerlink" title="나의 풀이"></a>나의 풀이</h2><p><code>every</code>메소드를 써서 키보드 배열 중 모든 문자열이 속하는 배열이 있는 지 확인하는 부분에서 반복문을 쓸까 하다가 키보드 배열의 값은 변경될 일이 없을 것 같고 반복문 쓰면서 <code>every</code>의 반환값을 어딘가에 저장해두는 것이 더 좋은 방법 같지는 않아서 다음과 같이 풀었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 48ms</span></span><br><span class="line"><span class="keyword">const</span> keyboard = [</span><br><span class="line">    [<span class="string">'Q'</span>, <span class="string">'W'</span>, <span class="string">'E'</span>, <span class="string">'R'</span>, <span class="string">'T'</span>, <span class="string">'Y'</span>, <span class="string">'U'</span>, <span class="string">'I'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>],</span><br><span class="line">    [<span class="string">'A'</span>, <span class="string">'S'</span>, <span class="string">'D'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>],</span><br><span class="line">    [<span class="string">'Z'</span>, <span class="string">'X'</span>, <span class="string">'C'</span>, <span class="string">'V'</span>, <span class="string">'B'</span>, <span class="string">'N'</span>, <span class="string">'M'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> words.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> itemArr = item.toUpperCase().split(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">return</span> itemArr.every(<span class="function"><span class="params">item</span> =&gt;</span> keyboard[<span class="number">0</span>].includes(item)) || </span><br><span class="line">               itemArr.every(<span class="function"><span class="params">item</span> =&gt;</span> keyboard[<span class="number">1</span>].includes(item)) || </span><br><span class="line">               itemArr.every(<span class="function"><span class="params">item</span> =&gt;</span> keyboard[<span class="number">2</span>].includes(item));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>정규식이랑 <code>match()</code> 메소드, <code>some()</code>메소드를 이용해 다른 방법으로 풀어보았다. result에 한번 match의 반환값을 저장할 필요가 있었는데, join()으로 다시 문자열 결합할 때, match의 반환값이 배열이 아니라 <code>null</code>일때도 있기 때문이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 52ms</span></span><br><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> keyboards = [<span class="regexp">/[QWERTYUIOP]/ig</span>, /[ASDFGHJKL]/ig, /[ZXCVBNM]/ig];</span><br><span class="line">    <span class="keyword">return</span> words.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyboards.some(<span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = item.match(row);</span><br><span class="line">            <span class="keyword">return</span> result &amp;&amp; result.join(<span class="string">''</span>) === item</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><p>정규식을 굉장히 잘 사용한 풀이인 것 같다. <code>^</code>과 <code>$</code>을 이용해서 문자셋으로만 구성된 단어인지 여부를 RegExp <code>test()</code> 메소드를 통해서 bool값으로 반환하도록 했다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> words.filter(<span class="function">(<span class="params">w</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// remove word from array if it fails matching all three rows</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            !<span class="regexp">/^[qwertyuiop]*$/i</span>.test(w) &amp;&amp;</span><br><span class="line">            !<span class="regexp">/^[asdfghjkl]*$/i</span>.test(w) &amp;&amp;</span><br><span class="line">            !<span class="regexp">/^[zxcvbnm]*$/i</span>.test(w)</span><br><span class="line">        ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/keyboard-row/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 문제링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gi
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://chiabi.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://chiabi.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://chiabi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>2018 장고걸스 서울 워크샵 후기</title>
    <link href="http://chiabi.github.io/2018/07/31/djangogirls/"/>
    <id>http://chiabi.github.io/2018/07/31/djangogirls/</id>
    <published>2018-07-31T04:03:45.000Z</published>
    <updated>2018-08-08T14:30:18.292Z</updated>
    
    <content type="html"><![CDATA[<p>기다리던 장고걸스 서울 워크샵 소식이 올라왔을 때 기쁘면서도 걱정이 되었다. 나는 파이썬과 장고는 생소하지만, 프로그래밍을 전혀 모르는 사람은 아니며 퍼블리셔로는 3년을 일했는데 개발 입문자를 위한 이 워크샵에 당첨될 수 있을까? 그래서 참가 신청 때 개발 경험이 있는지 등을 묻는 질문지를 보면서 이거 살짝 뻥을 쳐야하는 건가 생각했다. 차마 그럴 수 없어서 매우 솔직하게 썼는데 ‘장고걸스에서의 경험을 나누고 싶고 깃헙을 관리하고 있고 개발 블로그도 운영하고 있습니다’라는 나의 어필이 통한 것일까 당첨이 되었다. (야호!)<br>그리고 스쿨 동기들에게도 슬랙으로 워크샵 소식을 공유했더니 몇분이 신청해서 같이 참여하게 되었다.</p><p><img src="/images/post_django1.jpg" alt="장고걸스 행사장 앞에 있는 배너"></p><h2 id="장고걸스는-개발-입문자가-가장-편안한-마음으로-참여할-수-있는-개발-행사이다"><a href="#장고걸스는-개발-입문자가-가장-편안한-마음으로-참여할-수-있는-개발-행사이다" class="headerlink" title="장고걸스는 개발 입문자가 가장 편안한 마음으로 참여할 수 있는 개발 행사이다."></a>장고걸스는 개발 입문자가 가장 편안한 마음으로 참여할 수 있는 개발 행사이다.</h2><p>2018년의 나의 다짐은 ‘마크업만이 아니라 스크립트도 잘 다루고 최신 프론트엔드 트렌드도 따라갈 수 있는 개발자가 되자’였다. 그래서 3년을 다녔던 웹 에이전시를 나오기로 했고, 눈여겨보고 있던 패스트캠퍼스의 프론트엔드 스쿨 과정을 등록했다. 마침 시기도 적절한 게 퇴사일과 학원 개강일 사이에 2주 정도의 텀이 있었다. 학원에서는 각종 개발 커뮤니티와 밋업, 컨퍼런스에 참여하기를 권장했고 실제로 그렇게 열심히 살아야만 이 시대의 개발자(적어도 내가 이상으로 삼았던 개발자)로 살아갈 수 있는 것 같았다. 일단 페이스북 그룹이나 슬랙에 가입했다. 커뮤니티가 다양한 만큼 종종 다양한 행사 소식도 올라왔다. 간단히 맥주를 마시면서 개발에 관한 얘기를 나눠보자는 모임부터 해마다 정기적으로 열리는 것 같은 컨퍼런스 소식까지 다양했다. 그런데 그 많은 행사 중에 어느 것 하나 선뜻 참여할 용기가 나지 않았던 이유는 내가 꿔다놓은 보릿자루같이 굴 것 같아서였다. </p><blockquote><p>‘아는 사람 하나 없이 뻘쭘하게 있을 것 같아.’<br>‘대화하는데 내가 너무 몰라서 못 알아들으면 어떡하지?’<br>‘내가 너무 바보 같은 질문을 하면 어쩌지?’<br>‘입문자를 위한 모임은 없나?’</p></blockquote><p>이런 나의 걱정을 해소해주고 편안한 마음으로 참여할 수 있는 개발 행사가 장고걸스 워크샵이었다. </p><p>장고걸스 워크샵에서 가장 좋았던 점은 워크샵 기간 동안 지켜줘야 할 점에 대해 알려주는데, 그중 참석자는 어떠한 질문이라도 (너무 기초적이라 바보같이 느껴질 것 같은 질문이라도) 할 수 있다는 것이다. 요즘은 개발 커뮤니티에서도 어느 정도 자정하는 분위기인데, 가끔 너무 기초적인 것을 물어보는 사람에게 그 정도도 검색해서 찾아보지 않으냐며 날카롭게 구는 사람들이 몇몇 있다. 모르는 사람의 가장 큰 어려움은 이 모르는 걸 어떤 방법을 써야 해결할 수 있는지조차 모른다는 것이다. 아는 사람들이야 ‘“구글”에 “영어”로 이런 “키워드”로 검색하면 다 나와’, ‘“stack overflow”에 가면 다 있어’라고 말하지만, 그것조차 모를 수도 있는 법이다. 실제로 나는 웹 쪽으로 전향하기 전, 우체국에서 일할 당시만 해도 크롬은 안 썼다. 검색은 모두 네이버를 통해 이뤄졌고 어릴 때는 익스플로러가 업데이트되어서 UI가 조금이라도 바뀌면 화를 냈었다. 내가 그 사람 옆에서 성장 과정을 계속 지켜보지 않은 이상은 상대가 어느 정도 알 것이라는 판단을 섣부르게 해서는 안 된다.</p><p>아무튼, 이런 나의 여과 없이 나오는 질문에도 친절히 알려주신 <strong>이재열</strong> 코치님께 감사드린다. </p><h2 id="장고걸스에는-훌륭하고-친절한-코치님이-많이-계신다-모른다고-걱정하지-말자"><a href="#장고걸스에는-훌륭하고-친절한-코치님이-많이-계신다-모른다고-걱정하지-말자" class="headerlink" title="장고걸스에는 훌륭하고 친절한 코치님이 많이 계신다. 모른다고 걱정하지 말자"></a>장고걸스에는 훌륭하고 친절한 코치님이 많이 계신다. 모른다고 걱정하지 말자</h2><p>행사장에 딱 들어섰을 때 느낀 것은 ‘많다! 사람이 많다!!’였다. 파란 옷을 입은 워크샵 신청자도 많은데 흰옷을 입고 있는 코치님이나 검은 옷을 입고 있는 관계자분도 많았다. 조를 꾸려서 한 조에 신청자 3명 정도에 코치님이 1명 이상이 붙어서 진행하는데, 그렇게 구성된 조가 20팀 이상이었던 것 같다.<br>워크샵 첫날(7/20)은 7시에 시작되어 2시간 정도 파이썬을 설치하거나 에디터를 설치하는 것 같은 기본적인 개발환경을 세팅했다. 두 번째 날(7/21)에 본격적으로 장고걸스 튜토리얼을 따라 하면서 장고로 블로그를 만들었다. 우리 조는 나를 포함해 개발을 배워보셨거나 배우고 있는 분들이어서 어쩌다 보니 굉장히 빠르게 진행되어 심화 튜토리얼까지 진행해버렸지만, 중간중간 막히는 부분도 있었다. 나의 경우는 내가 찾을 수 없는 오류가 발생하는 경우거나 git에서 실수해버린 경우였는데 코치님이 팀 테이블 주위를 열심히 뛰어다니면서 문제가 발생할 때마다 같이 봐주시고 해결해주셨다. 그리고 블로그를 만들면서 개인적으로 파이썬 문법과 장고에 대해 어느 부분까지가 장고의 기능이고, 파이썬의 문법인지 궁금한 점을 여쭤봤는데 매우 친절하고 쉽게 알려주셨다.<br>특히 첫날에 MVC에 대해 설명해주셨는데, 사실 이전에는 MVC, MVVM 등의 아키텍처 패턴에 대한 이해가 많이 부족했다. 리액트는 뷰만 담당하는 라이브러리이고 앵귤러는 프레임워크다라는 설명을 들었을 때도 앵귤러에 대한 경험과 이해가 없다 보니 어떤 점이 다른 것인지 이해하기는 힘들었다. 관련해서 글을 찾아봐도 이해를 잘 못 했는데, 이재열 코치님의 설명을 듣고 장고걸스 튜토리얼을 따라 해 보면서 MVC 패턴이나 프레임워크란 것이 어떤 것인지 이해하게 되었다.</p><p><img src="/images/post_django2.jpg" alt="나의 첫 파이썬/장고 프로젝트"></p><p>장고걸스 워크샵의 좋은 점은 내가 혼자서 한다면 몇 날 며칠이 걸릴지도 모르는 문제를 코치의 도움을 받아 빠르게 해결할 수 있다는 것이다. 혼자 공부하는 것에도 장점은 있다. 해결 방법을 찾는 과정 또한 공부일 것이고, 문제 해결 능력을 키울 수 있다. 해결했다는 성취감 역시 얻을 수 있다. 단점은 매우 많은 삽질을 해야 하고 엄청나게 시간을 낭비할지 모른다는 것이다. 이전에 장고걸스 튜토리얼을 따라 해보려다 포기한 이유는 튜토리얼 자체가 ‘이 정도는 아시죠?’ 같은 느낌이 없지 않아 있는 데다가 그 이 정도를 맞추기 위해 어디부터 공부해야 할 지 감이 안 잡히고, 오류 상황이 발생했을 때 그걸 풀 능력이 내게 부족해서 gulp와 Sass를 처음 익힐 때처럼 매우 고통의 시간이 될 것 같은 예감이 들어서였다. 그래서 스쿨과정이 끝날 때쯤에는 어느 정도 스크립트에 익숙해져 있을 테니 그때 다시 도전하자는 마음으로 일단 접어두었었다.<br>단순히 따라하는 것뿐이더라도 개발의 한 사이클을 경험해보고 결과물을 만들게 되면 앞으로의 공부에 많은 도움이 된다. 그런 점에서 장고걸스는 개발 입문자에게 (혹은 나처럼 파이썬/장고 입문자에게) 굉장히 좋은 기회인 것 같다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p><del>오늘도 작문 실력을 늘려야겠다는 깊은 반성을 하며…</del><br>장고걸스 워크샵을 신청한 계기는 ‘잘 만들어진 튜토리얼을 제공한다해도 누구의 도움도 없이 생소한 언어와 생소한 기술을 사용해 보는 것은 굉장히 오랜 시간이 걸리니까 워크샵을 통해 코치님들의 도움을 받아 한 사이클을 빠르게 경험해보자’였다. 실제로 코치님의 도움으로 튜토리얼을 따라하는데 큰 어려움은 없었다. 장고의 일부를 경험한 것이지만 웹 프레임워크라는 것이 어떤 것인지 경험해 볼 수 있어서 그것만으로도 굉장히 유익했다.<br>그런데 그런 목표 성취 이상의 경험이었다. 세마나 형식의 컨퍼런스 외에 이런 소통을 통한 커뮤니티 행사에 처음 참여해 본 것이었고 나 스스로 이전과 다르게 외향적으로도 적극적인 사람이 되었구나를 느꼈다. 그리고 앞으로 개발 커뮤니티의 행사에 참여할 용기를 얻었다. 다음에는 장고걸스에 코치로 참여하는 것을 목표로 해야겠다.</p><p><img src="/images/post_django3.jpg" alt="장고걸스 굿즈가 탐이 난다면 다음 워크샵 신청..."></p><hr><ul><li><a href="https://djangogirls.org/seoul/" target="_blank" rel="noopener">django girls seoul</a></li><li><a href="https://www.facebook.com/djangogirlsseoul/" target="_blank" rel="noopener">django girls seoul : 페이스북 커뮤니티</a></li><li><a href="https://tutorial.djangogirls.org/ko/" target="_blank" rel="noopener">장고걸스 튜토리얼</a></li><li><a href="https://tutorial-extensions.djangogirls.org/ko/" target="_blank" rel="noopener">장고걸스 튜토리얼 : 심화</a></li><li><a href="http://chiabi.pythonanywhere.com/" target="_blank" rel="noopener">나의 장고 블로그 결과물</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;기다리던 장고걸스 서울 워크샵 소식이 올라왔을 때 기쁘면서도 걱정이 되었다. 나는 파이썬과 장고는 생소하지만, 프로그래밍을 전혀 모르는 사람은 아니며 퍼블리셔로는 3년을 일했는데 개발 입문자를 위한 이 워크샵에 당첨될 수 있을까? 그래서 참가 신
      
    
    </summary>
    
      <category term="log" scheme="http://chiabi.github.io/categories/log/"/>
    
    
      <category term="Django Girls" scheme="http://chiabi.github.io/tags/Django-Girls/"/>
    
      <category term="장고걸스" scheme="http://chiabi.github.io/tags/%EC%9E%A5%EA%B3%A0%EA%B1%B8%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://chiabi.github.io/2018/07/28/TIL/"/>
    <id>http://chiabi.github.io/2018/07/28/TIL/</id>
    <published>2018-07-28T08:15:30.000Z</published>
    <updated>2018-07-31T04:02:46.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="엔트리"><a href="#엔트리" class="headerlink" title="엔트리"></a>엔트리</h3><p>감기와 올해 4학년이 된 사촌동생이 함께 찾아왔다.(신난다) 자는 동안은 감기로 죽어있고, 깨어있는 동안은 열정적인 여동생과 놀아줘야했다. 다음주 내내 휴가를 낸 언니는 그것만 바라보며 약간 득도한 모양이다. ‘치킨차차’라고 기억력 향상에 매우 유익한 보드게임이 있는데, 아무도 나와 놀아주지 않아서 구석에서 썩고 있던 것을 사촌동생이 잘도 찾아내서 끝나지 않을 것만같은 꼬리잡기 릴레이를 했다.</p><p>동생의 흥미를 다른 곳으로 돌리기 위해 게임 만드는 거 좋아하냐는 질문으로 약을 팔면서 컴퓨터 앞에 앉혔다. 다행히 게임 만드는 게 재미있을 것 같다며 흥미로워 했다. 엔트리는 네이버에서 홍보할 당시에 소프트웨어적 사고력을 키워준대서 해봤었는데, 오랜만에 들어오니 많이 체계적으로 바껴있고 작품 공유하기에는 어린애들이 만든게 맞나 싶을 정도로 꽤 잘 만든 것도 있었다. 학습하기를 따라하도록 하고서 지켜봤는데, 학습용이라는 목적에 맞게 단계적으로 진행하도록 설명 팁이 계속 제공되었다.<br>학습하기 외에 작품만들기를 이용하면, 학습하기에서 학습했던 것을 토대로 자신만의 창의적인 작품을 만들어 볼 수 있는데, 이걸 봤다가 갑자기 모르는 UI가 급 보여지니까 어렵게 느껴졌는지 사촌동생의 흥미 역시 급 하락해버렸다… </p><p>액괴 영상에 밀려서 더이상 진행하지는 못했지만, 학습하기에서 반복문 안에 로직을 넣는 것이 나왔었는데, 이런 사고력을 어릴때부터 키운다면 나중에 다른 언어를 공부한다해도 크게 어려움이 없겠구나 생각되었다. 요즘 초등학생들은 이런 엔트리나 스크래치를 이용해서 코딩교육을 한다고 들었는데, 나중에라도 동생이 이쪽으로 흥미가 생기거나 필요하게 되면 나한테 도움을 구해줬으면 좋겠다. 그리고 꼭 개발자가 되고싶지 않더라도 경험이란 것은 앞으로의 선택에 중요한 밑거름이 되니까 도움이 되었으면 좋겠다.  </p><p>갑자기 고등학생때 RPG 쯔꾸루로 게임을 만들어본다고 알지도 못하는 스크립트를 Ctrl + C / V 하면서 혼자 삽질했던 기억이…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;h3 id=&quot;엔트리&quot;&gt;&lt;a href=&quot;#엔트리&quot; class=&quot;headerlink&quot; title=&quot;엔트리
      
    
    </summary>
    
      <category term="TIL" scheme="http://chiabi.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="http://chiabi.github.io/tags/TIL/"/>
    
  </entry>
  
</feed>
